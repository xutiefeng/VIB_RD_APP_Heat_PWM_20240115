<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\VIB_APP.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\VIB_APP.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Thu Jan 18 08:08:18 2024
<BR><P>
<H3>Maximum Stack Usage =        560 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
DiagSid_Deal22 &rArr; DiagSub_Deal22
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[33]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33]">NMI_Handler</a><BR>
 <LI><a href="#[34]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34]">HardFault_Handler</a><BR>
 <LI><a href="#[35]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35]">SVC_Handler</a><BR>
 <LI><a href="#[36]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36]">PendSV_Handler</a><BR>
 <LI><a href="#[54]">ADC0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[54]">ADC0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[54]">ADC0_IRQHandler</a> from startup_s32k116.o(.text) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[43]">CAN0_ORed_0_31_MB_IRQHandler</a> from flexcan.o(i.CAN0_ORed_0_31_MB_IRQHandler) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[42]">CAN0_ORed_Err_Wakeup_IRQHandler</a> from flexcan.o(i.CAN0_ORed_Err_Wakeup_IRQHandler) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[55]">CMP0_IRQHandler</a> from startup_s32k116.o(.text) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[7]">CanApp_RxTimeOutACU35A</a> from canapp.o(i.CanApp_RxTimeOutACU35A) referenced from canapp.o(.constdata)
 <LI><a href="#[6]">CanApp_RxTimeOutBCM318</a> from canapp.o(i.CanApp_RxTimeOutBCM318) referenced from canapp.o(.constdata)
 <LI><a href="#[8]">CanApp_RxTimeOutICM31E</a> from canapp.o(i.CanApp_RxTimeOutICM31E) referenced from canapp.o(.constdata)
 <LI><a href="#[9]">CanApp_RxTimeOutVCU3F2</a> from canapp.o(i.CanApp_RxTimeOutVCU3F2) referenced 3 times from canapp.o(.constdata)
 <LI><a href="#[38]">DMA0_IRQHandler</a> from edma_irq.o(i.DMA0_IRQHandler) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[39]">DMA1_IRQHandler</a> from edma_irq.o(i.DMA1_IRQHandler) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[3a]">DMA2_IRQHandler</a> from edma_irq.o(i.DMA2_IRQHandler) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[3b]">DMA3_IRQHandler</a> from edma_irq.o(i.DMA3_IRQHandler) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[3c]">DMA_Error_IRQHandler</a> from edma_irq.o(i.DMA_Error_IRQHandler) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[31]">DiagDid_IOCtrl_LampCtrl</a> from diagdid.o(i.DiagDid_IOCtrl_LampCtrl) referenced from diagdid.o(i.DiagDid_Init)
 <LI><a href="#[19]">DiagDid_Read_0110</a> from diagdid.o(i.DiagDid_Read_0110) referenced from diagdid.o(i.DiagDid_Init)
 <LI><a href="#[1a]">DiagDid_Read_0200</a> from diagdid.o(i.DiagDid_Read_0200) referenced from diagdid.o(i.DiagDid_Init)
 <LI><a href="#[1b]">DiagDid_Read_0201</a> from diagdid.o(i.DiagDid_Read_0201) referenced from diagdid.o(i.DiagDid_Init)
 <LI><a href="#[2a]">DiagDid_Read_1000</a> from diagdid.o(i.DiagDid_Read_1000) referenced from diagdid.o(i.DiagDid_Init)
 <LI><a href="#[2b]">DiagDid_Read_1002</a> from diagdid.o(i.DiagDid_Read_1002) referenced from diagdid.o(i.DiagDid_Init)
 <LI><a href="#[1c]">DiagDid_Read_F102</a> from diagdid.o(i.DiagDid_Read_F102) referenced from diagdid.o(i.DiagDid_Init)
 <LI><a href="#[1d]">DiagDid_Read_F103</a> from diagdid.o(i.DiagDid_Read_F103) referenced from diagdid.o(i.DiagDid_Init)
 <LI><a href="#[1e]">DiagDid_Read_F17F</a> from diagdid.o(i.DiagDid_Read_F17F) referenced from diagdid.o(i.DiagDid_Init)
 <LI><a href="#[1f]">DiagDid_Read_F180</a> from diagdid.o(i.DiagDid_Read_F180) referenced from diagdid.o(i.DiagDid_Init)
 <LI><a href="#[20]">DiagDid_Read_F184</a> from diagdid.o(i.DiagDid_Read_F184) referenced from diagdid.o(i.DiagDid_Init)
 <LI><a href="#[21]">DiagDid_Read_F186</a> from diagdid.o(i.DiagDid_Read_F186) referenced from diagdid.o(i.DiagDid_Init)
 <LI><a href="#[22]">DiagDid_Read_F187</a> from diagdid.o(i.DiagDid_Read_F187) referenced from diagdid.o(i.DiagDid_Init)
 <LI><a href="#[23]">DiagDid_Read_F189</a> from diagdid.o(i.DiagDid_Read_F189) referenced from diagdid.o(i.DiagDid_Init)
 <LI><a href="#[24]">DiagDid_Read_F18C</a> from diagdid.o(i.DiagDid_Read_F18C) referenced from diagdid.o(i.DiagDid_Init)
 <LI><a href="#[25]">DiagDid_Read_F18E</a> from diagdid.o(i.DiagDid_Read_F18E) referenced from diagdid.o(i.DiagDid_Init)
 <LI><a href="#[26]">DiagDid_Read_F190</a> from diagdid.o(i.DiagDid_Read_F190) referenced from diagdid.o(i.DiagDid_Init)
 <LI><a href="#[27]">DiagDid_Read_F193</a> from diagdid.o(i.DiagDid_Read_F193) referenced from diagdid.o(i.DiagDid_Init)
 <LI><a href="#[28]">DiagDid_Read_F195</a> from diagdid.o(i.DiagDid_Read_F195) referenced from diagdid.o(i.DiagDid_Init)
 <LI><a href="#[29]">DiagDid_Read_F199</a> from diagdid.o(i.DiagDid_Read_F199) referenced from diagdid.o(i.DiagDid_Init)
 <LI><a href="#[30]">DiagDid_Write_0110</a> from diagdid.o(i.DiagDid_Write_0110) referenced from diagdid.o(i.DiagDid_Init)
 <LI><a href="#[2e]">DiagDid_Write_F102</a> from diagdid.o(i.DiagDid_Write_F102) referenced from diagdid.o(i.DiagDid_Init)
 <LI><a href="#[2f]">DiagDid_Write_F103</a> from diagdid.o(i.DiagDid_Write_F103) referenced from diagdid.o(i.DiagDid_Init)
 <LI><a href="#[2c]">DiagDid_Write_F18C</a> from diagdid.o(i.DiagDid_Write_F18C) referenced from diagdid.o(i.DiagDid_Init)
 <LI><a href="#[2d]">DiagDid_Write_F190</a> from diagdid.o(i.DiagDid_Write_F190) referenced from diagdid.o(i.DiagDid_Init)
 <LI><a href="#[d]">DiagSid_Deal10</a> from diagsid.o(i.DiagSid_Deal10) referenced from candiag.o(i.CanDiag_Dispatcher)
 <LI><a href="#[e]">DiagSid_Deal11</a> from diagsid.o(i.DiagSid_Deal11) referenced from candiag.o(i.CanDiag_Dispatcher)
 <LI><a href="#[f]">DiagSid_Deal14</a> from diagsid.o(i.DiagSid_Deal14) referenced from candiag.o(i.CanDiag_Dispatcher)
 <LI><a href="#[10]">DiagSid_Deal19</a> from diagsid.o(i.DiagSid_Deal19) referenced from candiag.o(i.CanDiag_Dispatcher)
 <LI><a href="#[11]">DiagSid_Deal22</a> from diagsid.o(i.DiagSid_Deal22) referenced from candiag.o(i.CanDiag_Dispatcher)
 <LI><a href="#[12]">DiagSid_Deal27</a> from diagsid.o(i.DiagSid_Deal27) referenced from candiag.o(i.CanDiag_Dispatcher)
 <LI><a href="#[13]">DiagSid_Deal28</a> from diagsid.o(i.DiagSid_Deal28) referenced from candiag.o(i.CanDiag_Dispatcher)
 <LI><a href="#[14]">DiagSid_Deal2E</a> from diagsid.o(i.DiagSid_Deal2E) referenced from candiag.o(i.CanDiag_Dispatcher)
 <LI><a href="#[15]">DiagSid_Deal2F</a> from diagsid.o(i.DiagSid_Deal2F) referenced from candiag.o(i.CanDiag_Dispatcher)
 <LI><a href="#[16]">DiagSid_Deal31</a> from diagsid.o(i.DiagSid_Deal31) referenced from candiag.o(i.CanDiag_Dispatcher)
 <LI><a href="#[17]">DiagSid_Deal3E</a> from diagsid.o(i.DiagSid_Deal3E) referenced from candiag.o(i.CanDiag_Dispatcher)
 <LI><a href="#[18]">DiagSid_Deal85</a> from diagsid.o(i.DiagSid_Deal85) referenced from candiag.o(i.CanDiag_Dispatcher)
 <LI><a href="#[3d]">ERM_fault_IRQHandler</a> from startup_s32k116.o(.text) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[51]">FLEXIO_IRQHandler</a> from startup_s32k116.o(.text) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[4a]">FTFC_IRQHandler</a> from startup_s32k116.o(.text) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[44]">FTM0_Ch0_7_IRQHandler</a> from startup_s32k116.o(.text) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[45]">FTM0_Fault_IRQHandler</a> from startup_s32k116.o(.text) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[46]">FTM0_Ovf_Reload_IRQHandler</a> from sys.o(i.FTM0_Ovf_Reload_IRQHandler) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[47]">FTM1_Ch0_7_IRQHandler</a> from startup_s32k116.o(.text) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[48]">FTM1_Fault_IRQHandler</a> from startup_s32k116.o(.text) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[49]">FTM1_Ovf_Reload_IRQHandler</a> from startup_s32k116.o(.text) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[34]">HardFault_Handler</a> from startup_s32k116.o(.text) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[50]">LPI2C0_Master_Slave_IRQHandler</a> from startup_s32k116.o(.text) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[4c]">LPIT0_IRQHandler</a> from startup_s32k116.o(.text) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[52]">LPSPI0_IRQHandler</a> from lpspi_irq.o(i.LPSPI0_IRQHandler) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[40]">LPTMR0_IRQHandler</a> from startup_s32k116.o(.text) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[57]">LPUART0_RxTx_IRQHandler</a> from lpuart.o(i.LPUART0_RxTx_IRQHandler) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[56]">LPUART1_RxTx_IRQHandler</a> from startup_s32k116.o(.text) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[33]">NMI_Handler</a> from startup_s32k116.o(.text) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[4b]">PDB0_IRQHandler</a> from startup_s32k116.o(.text) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[41]">PORT_IRQHandler</a> from sys.o(i.PORT_IRQHandler) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[36]">PendSV_Handler</a> from startup_s32k116.o(.text) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[4f]">RCM_IRQHandler</a> from startup_s32k116.o(.text) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[3e]">RTC_IRQHandler</a> from startup_s32k116.o(.text) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[3f]">RTC_Seconds_IRQHandler</a> from startup_s32k116.o(.text) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[53]">Reserved27_IRQHandler</a> from startup_s32k116.o(.text) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[32]">Reset_Handler</a> from startup_s32k116.o(.text) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[4d]">SCG_CMU_LVD_LVWSCG_IRQHandler</a> from startup_s32k116.o(.text) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[35]">SVC_Handler</a> from startup_s32k116.o(.text) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[37]">SysTick_Handler</a> from sys.o(i.SysTick_Handler) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[a]">SystemInit</a> from system_s32k116.o(i.SystemInit) referenced from startup_s32k116.o(.text)
 <LI><a href="#[4e]">WDOG_IRQHandler</a> from startup_s32k116.o(.text) referenced from startup_s32k116.o(RESET)
 <LI><a href="#[58]">__main</a> from __main.o(!!!main) referenced from startup_s32k116.o(.text)
 <LI><a href="#[b]">init_data_bss</a> from startup.o(i.init_data_bss) referenced from startup_s32k116.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[58]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[59]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[5b]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[259]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[25a]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[5c]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[25b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[5e]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[25c]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[25d]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[25e]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[25f]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[260]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[261]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[262]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[263]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[264]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[265]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[266]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[267]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[268]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[269]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[26a]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[26b]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[26c]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[26d]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[26e]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[26f]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[270]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[63]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[271]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[272]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[273]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[274]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[275]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[276]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[277]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[5a]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[278]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[279]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[5d]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[27a]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[5f]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; SysInit &rArr; SYS_Init &rArr; CLOCK_SYS_UpdateConfiguration &rArr; CLOCK_SYS_SetConfiguration &rArr; CLOCK_DRV_Init &rArr; CLOCK_SYS_SetScgConfiguration &rArr; CLOCK_SYS_ConfigureModulesFromScg &rArr; CLOCK_SYS_TransitionSystemClock &rArr; CLOCK_SYS_SetSystemClockConfig &rArr; CLOCK_SYS_GetSrcFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[27b]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[77]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[62]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[27c]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[64]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[27d]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[32]"></a>Reset_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, startup_s32k116.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_s32k116.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_s32k116.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_s32k116.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_s32k116.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DefaultISR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_s32k116.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultISR
</UL>

<P><STRONG><a name="[54]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k116.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k116.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>ERM_fault_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k116.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>FLEXIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k116.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>FTFC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k116.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>FTM0_Ch0_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k116.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>FTM0_Fault_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k116.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>FTM1_Ch0_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k116.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>FTM1_Fault_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k116.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>FTM1_Ovf_Reload_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k116.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>LPI2C0_Master_Slave_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k116.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>LPIT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k116.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>LPTMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k116.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>LPUART1_RxTx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k116.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>PDB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k116.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>RCM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k116.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k116.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>RTC_Seconds_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k116.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>Reserved27_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k116.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SCG_CMU_LVD_LVWSCG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k116.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>WDOG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_s32k116.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTempDec
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTempAdd
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLongPressFunc
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCooL
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEpromInit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_Init
</UL>

<P><STRONG><a name="[27e]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[69]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_Init
</UL>

<P><STRONG><a name="[27f]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[280]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[281]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[282]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__aeabi_uidivmod</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_ConfigConverter
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_SetBaudRate
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetMsgBuffRegion
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLongPressFunc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerStart
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSystemClockFreq
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSimClkOutFreq
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetPeripheralClock
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_GetFrequency
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_ConvertFreqToPeriodTicks
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_UpdateDtcTask
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_DealRcvMsgACU35A
</UL>

<P><STRONG><a name="[283]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>__aeabi_idivmod</STRONG> (Thumb, 460 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeTask
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_ReadRXBuffer
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_FillupTxBuffer
</UL>

<P><STRONG><a name="[93]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADPowerColect
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADOzneCollect
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADLedCollect
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADHeatCollCollect
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADDoorCollect
</UL>

<P><STRONG><a name="[284]"></a>_d2f</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, d2f.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_22_2E_FillData
</UL>

<P><STRONG><a name="[285]"></a>_dfixu</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dfixui.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>

<P><STRONG><a name="[286]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_22_2E_FillData
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerStart
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADPowerColect
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADOzneCollect
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADLedCollect
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADHeatCollCollect
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADDoorCollect
</UL>

<P><STRONG><a name="[287]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_22_2E_FillData
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerStart
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADPowerColect
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADOzneCollect
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADLedCollect
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADHeatCollCollect
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADDoorCollect
</UL>

<P><STRONG><a name="[288]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_22_2E_FillData
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FactoryProcess
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADPowerColect
</UL>

<P><STRONG><a name="[289]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FactoryProcess
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBusState_318
</UL>

<P><STRONG><a name="[28a]"></a>_ffixu</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>__fpl_dcmp_InfNaN</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, dcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[73]"></a>__fpl_fcmp_InfNaN</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, fcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[71]"></a>__fpl_cmpreturn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[72]"></a>__fpl_dcheck_NaN2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[74]"></a>__fpl_fcheck_NaN2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[61]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[75]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[65]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[28b]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[28c]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[28d]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[28e]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[28f]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>ADC_DRV_ConfigChan</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, adc_driver.o(i.ADC_DRV_ConfigChan))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ADC_DRV_ConfigChan &rArr; ADC_SetInputChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetInputChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetADC0Task
</UL>

<P><STRONG><a name="[7a]"></a>ADC_DRV_ConfigConverter</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, adc_driver.o(i.ADC_DRV_ConfigConverter))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ADC_DRV_ConfigConverter &rArr; CLOCK_SYS_GetFreq &rArr; CLOCK_DRV_GetFreq &rArr; CLOCK_SYS_GetPccClockFreq &rArr; CLOCK_SYS_GetPeripheralClock &rArr; CLOCK_SYS_GetSysAsyncFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFreq
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetTriggerSelect
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetTriggerMode
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetSupplyMonitoringEnableFlag
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetSampleTime
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetPretriggerSelect
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetClockDivide
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[83]"></a>ADC_DRV_ConfigHwAverage</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, adc_driver.o(i.ADC_DRV_ConfigHwAverage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_DRV_ConfigHwAverage &rArr; ADC_SetHwAverageEnableFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetHwAverageMode
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetHwAverageEnableFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[88]"></a>ADC_DRV_GetChanResult</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, adc_driver.o(i.ADC_DRV_GetChanResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_DRV_GetChanResult
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetADC0Task
</UL>

<P><STRONG><a name="[87]"></a>ADC_DRV_WaitConvDone</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, adc_driver.o(i.ADC_DRV_WaitConvDone))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetADC0Task
</UL>

<P><STRONG><a name="[86]"></a>ADC_GetADC0Task</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, adc.o(i.ADC_GetADC0Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ADC_GetADC0Task &rArr; ADC_DRV_ConfigChan &rArr; ADC_SetInputChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_WaitConvDone
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_GetChanResult
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_ConfigChan
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMonitor
</UL>

<P><STRONG><a name="[89]"></a>ADC_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ADC_Init &rArr; ADC_DRV_ConfigConverter &rArr; CLOCK_SYS_GetFreq &rArr; CLOCK_DRV_GetFreq &rArr; CLOCK_SYS_GetPccClockFreq &rArr; CLOCK_SYS_GetPeripheralClock &rArr; CLOCK_SYS_GetSysAsyncFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_ConfigHwAverage
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_ConfigConverter
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_ConfigChan
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[8a]"></a>ADCollectProcess</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, bsp_adcollect.o(i.ADCollectProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ADCollectProcess &rArr; ADPowerColect &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_average
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetavergeADValue
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADPowerColect
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADOzneCollect
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADLedCollect
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADHeatCollCollect
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADDoorCollect
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysRuning
</UL>

<P><STRONG><a name="[8e]"></a>ADDoorCollect</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, bsp_adcollect.o(i.ADDoorCollect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ADDoorCollect &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCollectProcess
</UL>

<P><STRONG><a name="[8f]"></a>ADHeatCollCollect</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, bsp_adcollect.o(i.ADHeatCollCollect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ADHeatCollCollect &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCollectProcess
</UL>

<P><STRONG><a name="[90]"></a>ADLedCollect</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, bsp_adcollect.o(i.ADLedCollect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ADLedCollect &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCollectProcess
</UL>

<P><STRONG><a name="[91]"></a>ADOzneCollect</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, bsp_adcollect.o(i.ADOzneCollect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ADOzneCollect &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCollectProcess
</UL>

<P><STRONG><a name="[8d]"></a>ADPowerColect</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, bsp_adcollect.o(i.ADPowerColect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ADPowerColect &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCollectProcess
</UL>

<P><STRONG><a name="[99]"></a>AES_Cipher</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, aes.o(i.AES_Cipher))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AES_Cipher &rArr; MixColumns &rArr; FFmul
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBytes
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiftRows
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixColumns
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seed2Key
</UL>

<P><STRONG><a name="[9e]"></a>AES_Init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, aes.o(i.AES_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AES_Init &rArr; KeyExpansion
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyExpansion
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seed2Key
</UL>

<P><STRONG><a name="[a0]"></a>AuxHeatProcess</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, sysrun.o(i.AuxHeatProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AuxHeatProcess &rArr; PINS_DRV_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINS_DRV_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysRuning
</UL>

<P><STRONG><a name="[a2]"></a>BSP_EEPROM_Initialize</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_eeprom.o(i.BSP_EEPROM_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = BSP_EEPROM_Initialize &rArr; ReadTempEeprom &rArr; EEpromInit &rArr; WriteTempEeprom &rArr; __RTE_AppEepromWrite &rArr; __DiagTask_EEPWrite &rArr; CarSign_WriteToEep &rArr; EepApp_LoadWrtMsg &rArr; EepAll_LoadWrtMsg &rArr; EepAll_WrtMsg &rArr; EepAll_WrtMsgCopyToBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTempEeprom
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBingXangState
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBusState_318
</UL>

<P><STRONG><a name="[a5]"></a>BSP_UART_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_uart.o(i.BSP_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = BSP_UART_Init &rArr; LPUART0_InitReg &rArr; LPUART0_SetBaudRate &rArr; CLOCK_SYS_GetFreq &rArr; CLOCK_DRV_GetFreq &rArr; CLOCK_SYS_GetPccClockFreq &rArr; CLOCK_SYS_GetPeripheralClock &rArr; CLOCK_SYS_GetSysAsyncFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_InitReg
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[a7]"></a>BuzzerProcess</STRONG> (Thumb, 622 bytes, Stack size 8 bytes, buzzer.o(i.BuzzerProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BuzzerProcess &rArr; BuzzerStart &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysRuning
</UL>

<P><STRONG><a name="[a8]"></a>BuzzerStart</STRONG> (Thumb, 384 bytes, Stack size 48 bytes, buzzer.o(i.BuzzerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BuzzerStart &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINS_DRV_WritePin
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerProcess
</UL>

<P><STRONG><a name="[43]"></a>CAN0_ORed_0_31_MB_IRQHandler</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, flexcan.o(i.CAN0_ORed_0_31_MB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CAN0_ORed_0_31_MB_IRQHandler &rArr; FLEXCAN_UpdateMbInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_UpdateMbInfo
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_MbUnLock
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_MbLock
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RcvMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>CAN0_ORed_Err_Wakeup_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, flexcan.o(i.CAN0_ORed_Err_Wakeup_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CAN0_ORed_Err_Wakeup_IRQHandler &rArr; CanNm2_BusOffEntry &rArr; FLEXCAN0_InitReg &rArr; FLEXCAN_SetMaxMsgBuffNum &rArr; FLEXCAN_GetMsgBuffRegion &rArr; FLEXCAN_GetPayloadSize
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm2_BusOffEntry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>CAN_22_2E_FillData</STRONG> (Thumb, 1154 bytes, Stack size 48 bytes, sysrun.o(i.CAN_22_2E_FillData))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CAN_22_2E_FillData &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RTE_SetDidVIBData
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMonitor
</UL>

<P><STRONG><a name="[b3]"></a>CAN_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, can.o(i.CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CAN_Init &rArr; FLEXCAN0_InitReg &rArr; FLEXCAN_SetMaxMsgBuffNum &rArr; FLEXCAN_GetMsgBuffRegion &rArr; FLEXCAN_GetPayloadSize
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN0_InitReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_Init
</UL>

<P><STRONG><a name="[ac]"></a>CAN_RcvMsg</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, can.o(i.CAN_RcvMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_RcvMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSign_SleepBusAllowSet
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_ORed_0_31_MB_IRQHandler
</UL>

<P><STRONG><a name="[b6]"></a>CAN_SenMsg</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, can.o(i.CAN_SenMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CAN_SenMsg &rArr; FLEXCAN_TxData &rArr; FLEXCAN_UpdateMbInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TxData
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_SenMsg
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_NegResponse
</UL>

<P><STRONG><a name="[b8]"></a>CDCProcess</STRONG> (Thumb, 1524 bytes, Stack size 24 bytes, cdcmessage.o(i.CDCProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = CDCProcess &rArr; KeyPower &rArr; ReadTempEeprom &rArr; EEpromInit &rArr; WriteTempEeprom &rArr; __RTE_AppEepromWrite &rArr; __DiagTask_EEPWrite &rArr; CarSign_WriteToEep &rArr; EepApp_LoadWrtMsg &rArr; EepAll_LoadWrtMsg &rArr; EepAll_WrtMsg &rArr; EepAll_WrtMsgCopyToBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RTE_SendAppMsg
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RTE_RcvCDCMsgSt
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RTE_ClrRcvCDCMsgSt
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_TCL_TEL_CanMessage
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDelayCnt
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPower
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysRuning
</UL>

<P><STRONG><a name="[bf]"></a>CLOCK_DRV_GetFreq</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, clock_s32k1xx.o(i.CLOCK_DRV_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CLOCK_DRV_GetFreq &rArr; CLOCK_SYS_GetPccClockFreq &rArr; CLOCK_SYS_GetPeripheralClock &rArr; CLOCK_SYS_GetSysAsyncFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSimClockFreq
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetScgClockFreq
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetPccClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFreq
</UL>

<P><STRONG><a name="[c3]"></a>CLOCK_DRV_Init</STRONG> (Thumb, 62 bytes, Stack size 136 bytes, clock_s32k1xx.o(i.CLOCK_DRV_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = CLOCK_DRV_Init &rArr; CLOCK_SYS_SetScgConfiguration &rArr; CLOCK_SYS_ConfigureModulesFromScg &rArr; CLOCK_SYS_TransitionSystemClock &rArr; CLOCK_SYS_SetSystemClockConfig &rArr; CLOCK_SYS_GetSrcFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetSimConfiguration
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetScgConfiguration
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetPmcConfiguration
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetPccConfiguration
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetDefaultConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetConfiguration
</UL>

<P><STRONG><a name="[7b]"></a>CLOCK_SYS_GetFreq</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, clock_s32k1xx.o(i.CLOCK_SYS_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CLOCK_SYS_GetFreq &rArr; CLOCK_DRV_GetFreq &rArr; CLOCK_SYS_GetPccClockFreq &rArr; CLOCK_SYS_GetPeripheralClock &rArr; CLOCK_SYS_GetSysAsyncFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DRV_GetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_ConfigConverter
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_SetBaudRate
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_InitReg
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_GetFrequency
</UL>

<P><STRONG><a name="[213]"></a>CLOCK_SYS_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, clock_s32k1xx.o(i.CLOCK_SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_SYS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[e4]"></a>CLOCK_SYS_SetConfiguration</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, clock_s32k1xx.o(i.CLOCK_SYS_SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = CLOCK_SYS_SetConfiguration &rArr; CLOCK_DRV_Init &rArr; CLOCK_SYS_SetScgConfiguration &rArr; CLOCK_SYS_ConfigureModulesFromScg &rArr; CLOCK_SYS_TransitionSystemClock &rArr; CLOCK_SYS_SetSystemClockConfig &rArr; CLOCK_SYS_GetSrcFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DRV_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_UpdateConfiguration
</UL>

<P><STRONG><a name="[f0]"></a>CLOCK_SYS_UpdateConfiguration</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, clock_s32k1xx.o(i.CLOCK_SYS_UpdateConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = CLOCK_SYS_UpdateConfiguration &rArr; CLOCK_SYS_SetConfiguration &rArr; CLOCK_DRV_Init &rArr; CLOCK_SYS_SetScgConfiguration &rArr; CLOCK_SYS_ConfigureModulesFromScg &rArr; CLOCK_SYS_TransitionSystemClock &rArr; CLOCK_SYS_SetSystemClockConfig &rArr; CLOCK_SYS_GetSrcFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_EnableIRQGlobal
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_DisableIRQGlobal
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[101]"></a>CanAll_CancelSenMsg</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, canall.o(i.CanAll_CancelSenMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CanAll_CancelSenMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm2_BusOffEntry
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_OffLine
</UL>

<P><STRONG><a name="[11c]"></a>CanAll_ClrMsgData</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, canall.o(i.CanAll_ClrMsgData))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_TxStartVIB383
</UL>

<P><STRONG><a name="[23e]"></a>CanAll_CopyDataToMsg</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, canall.o(i.CanAll_CopyDataToMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CanAll_CopyDataToMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_UpdatePriodicMsg
</UL>

<P><STRONG><a name="[f3]"></a>CanAll_DealRcvBuf</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, canall.o(i.CanAll_DealRcvBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CanAll_DealRcvBuf &rArr; CanApp_DealRcvMsg &rArr; CanApp_DealRcvMsgBCM318 &rArr; CanApp_RxConfirmBCM318 &rArr; CanApp_RxTimeOutFlagClr &rArr; CanApp_RxTimeOutReload
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_EnableIRQ
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_DisableIRQ
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_DealRcvMsg
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_DealRcvMsg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_MsgCopyToMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_HandleTask
</UL>

<P><STRONG><a name="[f9]"></a>CanAll_Init</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, canall.o(i.CanAll_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = CanAll_Init &rArr; CanDiag_Init &rArr; CanDiag_FactoryModeCheck &rArr; DiagDid_ReadFromEep &rArr; CanDiag_ReadFromEep &rArr; EEPROM_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINS_DRV_ClearPins
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm2_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_InitMsg
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_InitBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_Init
</UL>

<P><STRONG><a name="[f6]"></a>CanAll_MsgCopyToMsg</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, canall.o(i.CanAll_MsgCopyToMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CanAll_MsgCopyToMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_DealRcvBuf
</UL>

<P><STRONG><a name="[100]"></a>CanAll_OffLine</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, canall.o(i.CanAll_OffLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CanAll_OffLine &rArr; CanAll_CancelSenMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_CancelSenMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_UpdateBattFlagTask
</UL>

<P><STRONG><a name="[102]"></a>CanAll_OnLine</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, canall.o(i.CanAll_OnLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CanAll_OnLine
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_UpdateBattFlagTask
</UL>

<P><STRONG><a name="[118]"></a>CanAll_ReqSenMsg</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, canall.o(i.CanAll_ReqSenMsg))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_ReqSenMsg
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_ReqSenMsg
</UL>

<P><STRONG><a name="[103]"></a>CanAll_SenMsg</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, canall.o(i.CanAll_SenMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CanAll_SenMsg &rArr; CAN_SenMsg &rArr; FLEXCAN_TxData &rArr; FLEXCAN_UpdateMbInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SenMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_TxTask
</UL>

<P><STRONG><a name="[104]"></a>CanAll_TxConfirm</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, canall.o(i.CanAll_TxConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CanAll_TxConfirm &rArr; CanDiag_TxConfirm &rArr; CanTp_TxConfirm
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_TxConfirm
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_TxConfirmVIB383
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_HandleTask
</UL>

<P><STRONG><a name="[107]"></a>CanAll_TxTask</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, canall.o(i.CanAll_TxTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CanAll_TxTask &rArr; CanAll_SenMsg &rArr; CAN_SenMsg &rArr; FLEXCAN_TxData &rArr; FLEXCAN_UpdateMbInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_TxStart
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_TxStartVIB383
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_SenMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_HandleTask
</UL>

<P><STRONG><a name="[233]"></a>CanApp_5sAppPeriodMsg_Start</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, canapp.o(i.CanApp_5sAppPeriodMsg_Start))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_5sAppMsg_Start
</UL>

<P><STRONG><a name="[f8]"></a>CanApp_DealRcvMsg</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, canapp.o(i.CanApp_DealRcvMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CanApp_DealRcvMsg &rArr; CanApp_DealRcvMsgBCM318 &rArr; CanApp_RxConfirmBCM318 &rArr; CanApp_RxTimeOutFlagClr &rArr; CanApp_RxTimeOutReload
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_MsgCopyToMsg
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_DealRcvMsgVCU3F2
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_DealRcvMsgTEL097
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_DealRcvMsgICM31E
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_DealRcvMsgCDC093
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_DealRcvMsgBCM318
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_DealRcvMsgACU35A
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_DealRcvBuf
</UL>

<P><STRONG><a name="[fd]"></a>CanApp_Init</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, canapp.o(i.CanApp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CanApp_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_Init
</UL>

<P><STRONG><a name="[117]"></a>CanApp_ReqSenMsg</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, canapp.o(i.CanApp_ReqSenMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CanApp_ReqSenMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_ReqSenMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_TxTimeTask
</UL>

<P><STRONG><a name="[11a]"></a>CanApp_RxContinCntInc</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, canapp.o(i.CanApp_RxContinCntInc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CanApp_RxContinCntInc
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_RxConfirmVCU3F2
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_RxConfirmICM31E
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_RxConfirmBCM318
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_RxConfirmACU35A
</UL>

<P><STRONG><a name="[238]"></a>CanApp_RxStatTask</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, canapp.o(i.CanApp_RxStatTask))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_HandleTask
</UL>

<P><STRONG><a name="[119]"></a>CanApp_RxTimeOutFlagClr</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, canapp.o(i.CanApp_RxTimeOutFlagClr))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CanApp_RxTimeOutFlagClr &rArr; CanApp_RxTimeOutReload
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_RxTimeOutReload
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_RxConfirmVCU3F2
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_RxConfirmICM31E
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_RxConfirmBCM318
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_RxConfirmACU35A
</UL>

<P><STRONG><a name="[11b]"></a>CanApp_RxTimeOutReload</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, canapp.o(i.CanApp_RxTimeOutReload))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CanApp_RxTimeOutReload
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_RxTimeOutFlagClr
</UL>

<P><STRONG><a name="[23b]"></a>CanApp_RxTimeTask</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, canapp.o(i.CanApp_RxTimeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CanApp_RxTimeTask
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_Period2msTask
</UL>

<P><STRONG><a name="[105]"></a>CanApp_TxConfirmVIB383</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, canapp.o(i.CanApp_TxConfirmVIB383))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_TxConfirm
</UL>

<P><STRONG><a name="[11e]"></a>CanApp_TxCycleEnable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, canapp.o(i.CanApp_TxCycleEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CanApp_TxCycleEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_TxTimeTask
</UL>

<P><STRONG><a name="[11f]"></a>CanApp_TxEventCntSet</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, canapp.o(i.CanApp_TxEventCntSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CanApp_TxEventCntSet
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm2_BusOffEntry
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm2_BusOffDeal
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_TxTimeTask
</UL>

<P><STRONG><a name="[139]"></a>CanApp_TxFastOnStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, canapp.o(i.CanApp_TxFastOnStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CanApp_TxFastOnStart
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_StatTask
</UL>

<P><STRONG><a name="[108]"></a>CanApp_TxStartVIB383</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, canapp.o(i.CanApp_TxStartVIB383))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CanApp_TxStartVIB383
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_ClrMsgData
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_TxTask
</UL>

<P><STRONG><a name="[237]"></a>CanApp_TxStatTask</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, canapp.o(i.CanApp_TxStatTask))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_HandleTask
</UL>

<P><STRONG><a name="[11d]"></a>CanApp_TxTimeTask</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, canapp.o(i.CanApp_TxTimeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CanApp_TxTimeTask &rArr; CanApp_TxEventCntSet
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_TxEventCntSet
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_TxCycleEnable
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_ReqSenMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_Period2msTask
</UL>

<P><STRONG><a name="[120]"></a>CanDiag_AccessDelayCheck</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, candiag.o(i.CanDiag_AccessDelayCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CanDiag_AccessDelayCheck &rArr; CanDiag_ReadFromEep &rArr; EEPROM_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_ReadFromEep
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_Init
</UL>

<P><STRONG><a name="[122]"></a>CanDiag_AccessDelayClr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, candiag.o(i.CanDiag_AccessDelayClr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CanDiag_AccessDelayClr &rArr; CanDiag_WriteToEep &rArr; EEPROM_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_WriteToEep
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSub_Deal2702
</UL>

<P><STRONG><a name="[124]"></a>CanDiag_AccessDelaySet</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, candiag.o(i.CanDiag_AccessDelaySet))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CanDiag_AccessDelaySet &rArr; CanDiag_WriteToEep &rArr; EEPROM_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_WriteToEep
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSub_Deal2702
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSub_Deal2701
</UL>

<P><STRONG><a name="[125]"></a>CanDiag_AccessInvalidRead</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, candiag.o(i.CanDiag_AccessInvalidRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CanDiag_AccessInvalidRead &rArr; CanDiag_ReadFromEep &rArr; EEPROM_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_ReadFromEep
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSub_Deal2702
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSub_Deal2701
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_TimeTask
</UL>

<P><STRONG><a name="[126]"></a>CanDiag_AccessInvalidWrite</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, candiag.o(i.CanDiag_AccessInvalidWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CanDiag_AccessInvalidWrite &rArr; CanDiag_WriteToEep &rArr; EEPROM_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_WriteToEep
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSub_Deal2702
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSub_Deal2701
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_TimeTask
</UL>

<P><STRONG><a name="[f7]"></a>CanDiag_DealRcvMsg</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, candiag.o(i.CanDiag_DealRcvMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CanDiag_DealRcvMsg &rArr; CanTp_DealRcvMsg &rArr; CanTp_TxConfirm
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_DealRcvMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_DealRcvBuf
</UL>

<P><STRONG><a name="[128]"></a>CanDiag_Dispatcher</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, candiag.o(i.CanDiag_Dispatcher))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CanDiag_Dispatcher &rArr; CanDiag_NegResponse &rArr; CAN_SenMsg &rArr; FLEXCAN_TxData &rArr; FLEXCAN_UpdateMbInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_NegResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_DealPhyTask
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_DealFunTask
</UL>

<P><STRONG><a name="[12a]"></a>CanDiag_FactoryModeCTRL</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, candiag.o(i.CanDiag_FactoryModeCTRL))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CanDiag_FactoryModeCTRL
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_SecurityGet
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_Period2msTask
</UL>

<P><STRONG><a name="[12c]"></a>CanDiag_FactoryModeCheck</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, candiag.o(i.CanDiag_FactoryModeCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = CanDiag_FactoryModeCheck &rArr; DiagDid_ReadFromEep &rArr; CanDiag_ReadFromEep &rArr; EEPROM_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_ReadFromEep
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_Init
</UL>

<P><STRONG><a name="[ff]"></a>CanDiag_Init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, candiag.o(i.CanDiag_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = CanDiag_Init &rArr; CanDiag_FactoryModeCheck &rArr; DiagDid_ReadFromEep &rArr; CanDiag_ReadFromEep &rArr; EEPROM_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_FactoryModeCheck
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_AccessDelayCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_Init
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal10
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_TimeTask
</UL>

<P><STRONG><a name="[129]"></a>CanDiag_NegResponse</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, candiag.o(i.CanDiag_NegResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CanDiag_NegResponse &rArr; CAN_SenMsg &rArr; FLEXCAN_TxData &rArr; FLEXCAN_UpdateMbInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SenMsg
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_DealSenBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal85
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal3E
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal31
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal2F
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal2E
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal28
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal27
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal22
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal19
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal14
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal11
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal10
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_Dispatcher
</UL>

<P><STRONG><a name="[131]"></a>CanDiag_PosResponse</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, candiag.o(i.CanDiag_PosResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CanDiag_PosResponse &rArr; CanTp_DealSenBuf &rArr; CanTp_DealSenBufSF
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_DealSenBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal85
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal3E
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal31
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal2F
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal2E
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal28
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal27
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal22
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal19
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal11
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal10
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_StatTask
</UL>

<P><STRONG><a name="[132]"></a>CanDiag_ProgReqSet</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, candiag.o(i.CanDiag_ProgReqSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CanDiag_ProgReqSet &rArr; CanDiag_WriteToEep &rArr; EEPROM_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_WriteToEep
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal10
</UL>

<P><STRONG><a name="[138]"></a>CanDiag_ReadEepTask</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, candiag.o(i.CanDiag_ReadEepTask))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_StatTask
</UL>

<P><STRONG><a name="[121]"></a>CanDiag_ReadFromEep</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, candiag.o(i.CanDiag_ReadFromEep))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CanDiag_ReadFromEep &rArr; EEPROM_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChckDataIsSpecify
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_ReadFromEep
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_AccessInvalidRead
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_AccessDelayCheck
</UL>

<P><STRONG><a name="[135]"></a>CanDiag_ReqSenMsg</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, candiag.o(i.CanDiag_ReqSenMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CanDiag_ReqSenMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_ReqSenMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_DealPhyTask
</UL>

<P><STRONG><a name="[12b]"></a>CanDiag_SecurityGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, candiag.o(i.CanDiag_SecurityGet))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSub_Deal2701
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_Write_F190
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_Write_F18C
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_Write_F103
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_Write_F102
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_Write_0110
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal2F
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal27
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_FactoryModeCTRL
</UL>

<P><STRONG><a name="[136]"></a>CanDiag_StatTask</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, candiag.o(i.CanDiag_StatTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CanDiag_StatTask &rArr; CanDiag_PosResponse &rArr; CanTp_DealSenBuf &rArr; CanTp_DealSenBufSF
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMS
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSoftwareReset
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_WriteEepTask
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_ReadEepTask
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_PosResponse
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_TxFastOnStart
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_HandleTask
</UL>

<P><STRONG><a name="[13c]"></a>CanDiag_TimeTask</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, candiag.o(i.CanDiag_TimeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = CanDiag_TimeTask &rArr; CanDiag_Init &rArr; CanDiag_FactoryModeCheck &rArr; DiagDid_ReadFromEep &rArr; CanDiag_ReadFromEep &rArr; EEPROM_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_AccessInvalidWrite
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_AccessInvalidRead
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_Period100msTask
</UL>

<P><STRONG><a name="[106]"></a>CanDiag_TxConfirm</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, candiag.o(i.CanDiag_TxConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CanDiag_TxConfirm &rArr; CanTp_TxConfirm
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_TxConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_TxConfirm
</UL>

<P><STRONG><a name="[109]"></a>CanDiag_TxStart</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, candiag.o(i.CanDiag_TxStart))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_TxTask
</UL>

<P><STRONG><a name="[137]"></a>CanDiag_WriteEepTask</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, candiag.o(i.CanDiag_WriteEepTask))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_StatTask
</UL>

<P><STRONG><a name="[123]"></a>CanDiag_WriteToEep</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, candiag.o(i.CanDiag_WriteToEep))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CanDiag_WriteToEep &rArr; EEPROM_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_WriteToEep
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_ProgReqSet
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_AccessInvalidWrite
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_AccessDelaySet
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_AccessDelayClr
</UL>

<P><STRONG><a name="[13f]"></a>CanNm2_BusOffDeal</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, cannm2.o(i.CanNm2_BusOffDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CanNm2_BusOffDeal &rArr; CanApp_TxEventCntSet
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_TxEventCntSet
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm2_TimeTask
</UL>

<P><STRONG><a name="[ae]"></a>CanNm2_BusOffEntry</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, cannm2.o(i.CanNm2_BusOffEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CanNm2_BusOffEntry &rArr; FLEXCAN0_InitReg &rArr; FLEXCAN_SetMaxMsgBuffNum &rArr; FLEXCAN_GetMsgBuffRegion &rArr; FLEXCAN_GetPayloadSize
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN0_InitReg
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_TxEventCntSet
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_CancelSenMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_ORed_Err_Wakeup_IRQHandler
</UL>

<P><STRONG><a name="[fe]"></a>CanNm2_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cannm2.o(i.CanNm2_Init))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_OnLine
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_Init
</UL>

<P><STRONG><a name="[236]"></a>CanNm2_StatTask</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cannm2.o(i.CanNm2_StatTask))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_HandleTask
</UL>

<P><STRONG><a name="[140]"></a>CanNm2_TimeTask</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cannm2.o(i.CanNm2_TimeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CanNm2_TimeTask &rArr; CanNm2_BusOffDeal &rArr; CanApp_TxEventCntSet
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm2_BusOffDeal
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_Period2msTask
</UL>

<P><STRONG><a name="[127]"></a>CanTp_DealRcvMsg</STRONG> (Thumb, 788 bytes, Stack size 20 bytes, cantp.o(i.CanTp_DealRcvMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CanTp_DealRcvMsg &rArr; CanTp_TxConfirm
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_TxConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_DealRcvMsg
</UL>

<P><STRONG><a name="[130]"></a>CanTp_DealSenBuf</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, cantp.o(i.CanTp_DealSenBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CanTp_DealSenBuf &rArr; CanTp_DealSenBufSF
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_DealSenBufSF
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_DealSenBufMF
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_PosResponse
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_NegResponse
</UL>

<P><STRONG><a name="[12e]"></a>CanTp_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, cantp.o(i.CanTp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CanTp_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_Init
</UL>

<P><STRONG><a name="[145]"></a>CanTp_StatTask</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cantp.o(i.CanTp_StatTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CanTp_StatTask &rArr; CanTp_DealPhyTask &rArr; CanDiag_Dispatcher &rArr; CanDiag_NegResponse &rArr; CAN_SenMsg &rArr; FLEXCAN_TxData &rArr; FLEXCAN_UpdateMbInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_DealPhyTask
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_DealFunTask
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_HandleTask
</UL>

<P><STRONG><a name="[23a]"></a>CanTp_TimeTask</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, cantp.o(i.CanTp_TimeTask))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_Period2msTask
</UL>

<P><STRONG><a name="[13d]"></a>CanTp_TxConfirm</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, cantp.o(i.CanTp_TxConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CanTp_TxConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_TxConfirm
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_DealRcvMsg
</UL>

<P><STRONG><a name="[14c]"></a>CarSign_DealSignFromCan</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, carsign.o(i.CarSign_DealSignFromCan))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSign_StatTask
</UL>

<P><STRONG><a name="[146]"></a>CarSign_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, carsign.o(i.CarSign_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CarSign_Init &rArr; CarSign_ReadFromEep &rArr; EepApp_LoadRadMsg &rArr; EepAll_LoadRadMsg &rArr; EepAll_RadMsg &rArr; EEPROM_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSign_ReadFromEep
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_Init
</UL>

<P><STRONG><a name="[15e]"></a>CarSign_ModeTesterStart</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, carsign.o(i.CarSign_ModeTesterStart))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_IOCtrl_LampCtrl
</UL>

<P><STRONG><a name="[15d]"></a>CarSign_ModeTesterStop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, carsign.o(i.CarSign_ModeTesterStop))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_IOCtrl_LampCtrl
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal10
</UL>

<P><STRONG><a name="[148]"></a>CarSign_ReadEepTask</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, carsign.o(i.CarSign_ReadEepTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CarSign_ReadEepTask &rArr; CarSign_ReadFromEep &rArr; EepApp_LoadRadMsg &rArr; EepAll_LoadRadMsg &rArr; EepAll_RadMsg &rArr; EEPROM_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSign_ReadFromEep
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSign_StatTask
</UL>

<P><STRONG><a name="[147]"></a>CarSign_ReadFromEep</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, carsign.o(i.CarSign_ReadFromEep))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CarSign_ReadFromEep &rArr; EepApp_LoadRadMsg &rArr; EepAll_LoadRadMsg &rArr; EepAll_RadMsg &rArr; EEPROM_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepApp_LoadRadMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_EEPRead
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSign_ReadEepTask
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSign_Init
</UL>

<P><STRONG><a name="[b5]"></a>CarSign_SleepBusAllowSet</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, carsign.o(i.CarSign_SleepBusAllowSet))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RcvMsg
</UL>

<P><STRONG><a name="[14a]"></a>CarSign_StatTask</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, carsign.o(i.CarSign_StatTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = CarSign_StatTask &rArr; CarSign_WriteEepTask &rArr; CarSign_WriteToEep &rArr; EepApp_LoadWrtMsg &rArr; EepAll_LoadWrtMsg &rArr; EepAll_WrtMsg &rArr; EepAll_WrtMsgCopyToBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSign_WriteEepTask
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSign_UpdateVehPower
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSign_UpDateSignFromCan
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSign_UpDateSignForCan
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSign_ReadEepTask
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSign_DealSignFromCan
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_HandleTask
</UL>

<P><STRONG><a name="[239]"></a>CarSign_TimeTask</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, carsign.o(i.CarSign_TimeTask))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_Period10msTask
</UL>

<P><STRONG><a name="[14d]"></a>CarSign_UpDateSignForCan</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, carsign.o(i.CarSign_UpDateSignForCan))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSign_StatTask
</UL>

<P><STRONG><a name="[14b]"></a>CarSign_UpDateSignFromCan</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, carsign.o(i.CarSign_UpDateSignFromCan))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CarSign_UpDateSignFromCan
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSign_StatTask
</UL>

<P><STRONG><a name="[14e]"></a>CarSign_UpdateVehPower</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, carsign.o(i.CarSign_UpdateVehPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CarSign_UpdateVehPower &rArr; Dtc_ResetFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_ResetFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSign_StatTask
</UL>

<P><STRONG><a name="[14f]"></a>CarSign_WriteEepTask</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, carsign.o(i.CarSign_WriteEepTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CarSign_WriteEepTask &rArr; CarSign_WriteToEep &rArr; EepApp_LoadWrtMsg &rArr; EepAll_LoadWrtMsg &rArr; EepAll_WrtMsg &rArr; EepAll_WrtMsgCopyToBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSign_WriteToEep
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSign_StatTask
</UL>

<P><STRONG><a name="[151]"></a>CarSign_WriteToEep</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, carsign.o(i.CarSign_WriteToEep))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CarSign_WriteToEep &rArr; EepApp_LoadWrtMsg &rArr; EepAll_LoadWrtMsg &rArr; EepAll_WrtMsg &rArr; EepAll_WrtMsgCopyToBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepApp_LoadWrtMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_EEPWrite
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSign_WriteEepTask
</UL>

<P><STRONG><a name="[134]"></a>ChckDataIsSpecify</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, diagdid.o(i.ChckDataIsSpecify))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ChckDataIsSpecify
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_ReadFromEep
</UL>

<P><STRONG><a name="[153]"></a>ChouTiMotor</STRONG> (Thumb, 306 bytes, Stack size 8 bytes, sysrun.o(i.ChouTiMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ChouTiMotor &rArr; PINS_DRV_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINS_DRV_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysRuning
</UL>

<P><STRONG><a name="[bb]"></a>ClearDelayCnt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, display.o(i.ClearDelayCnt))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TELProcess
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCProcess
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLongPressFunc
</UL>

<P><STRONG><a name="[154]"></a>CoolProcess</STRONG> (Thumb, 868 bytes, Stack size 8 bytes, sysrun.o(i.CoolProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CoolProcess &rArr; OpenYaSuoJi_1 &rArr; PINS_DRV_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINS_DRV_WritePin
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenYaSuoJi_1
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysRuning
</UL>

<P><STRONG><a name="[15f]"></a>Crc_Crc8</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, crc.o(i.Crc_Crc8))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Crc_Crc8
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_WriteToEep
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_WriteOneToEep
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_ReadOneFromEep
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_ReadFromEep
</UL>

<P><STRONG><a name="[38]"></a>DMA0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, edma_irq.o(i.DMA0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA0_IRQHandler &rArr; EDMA_DRV_IRQHandler &rArr; EDMA_DRV_ClearIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, edma_irq.o(i.DMA1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA1_IRQHandler &rArr; EDMA_DRV_IRQHandler &rArr; EDMA_DRV_ClearIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, edma_irq.o(i.DMA2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA2_IRQHandler &rArr; EDMA_DRV_IRQHandler &rArr; EDMA_DRV_ClearIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, edma_irq.o(i.DMA3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA3_IRQHandler &rArr; EDMA_DRV_IRQHandler &rArr; EDMA_DRV_ClearIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA_Error_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, edma_irq.o(i.DMA_Error_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DMA_Error_IRQHandler &rArr; EDMA_DRV_ErrorIRQHandler &rArr; EDMA_DRV_ClearIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_GetDmaRegBaseAddr
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ErrorIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[159]"></a>DTCDataCollect</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, sysrun.o(i.DTCDataCollect))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DTCDataCollect &rArr; __RTE_UpdateDTC &rArr; __DiagTask_UpdateDTC &rArr; Dtc_UpdateDtcBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RTE_UpdateDTC
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysRuning
</UL>

<P><STRONG><a name="[13a]"></a>DelayMS</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, time.o(i.DelayMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DelayMS
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_DRV_Trigger
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_StatTask
</UL>

<P><STRONG><a name="[15b]"></a>DelayUS</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, time.o(i.DelayUS))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMS
</UL>

<P><STRONG><a name="[12f]"></a>DiagDid_Init</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, diagdid.o(i.DiagDid_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DiagDid_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_Init
</UL>

<P><STRONG><a name="[12d]"></a>DiagDid_ReadFromEep</STRONG> (Thumb, 188 bytes, Stack size 88 bytes, diagdid.o(i.DiagDid_ReadFromEep))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = DiagDid_ReadFromEep &rArr; CanDiag_ReadFromEep &rArr; EEPROM_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_Crc8
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_ReadFromEep
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_Write_F18C
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_Read_F199
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_Read_F190
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_Read_F18C
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_Read_F184
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_Read_F103
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_Read_F102
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_Read_0201
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_Read_0200
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_FactoryModeCheck
</UL>

<P><STRONG><a name="[161]"></a>DiagDid_WriteToEep</STRONG> (Thumb, 156 bytes, Stack size 72 bytes, diagdid.o(i.DiagDid_WriteToEep))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = DiagDid_WriteToEep &rArr; CanDiag_WriteToEep &rArr; EEPROM_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_Crc8
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_WriteToEep
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_Write_F190
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_Write_F18C
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_Write_F103
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_Write_F102
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_Write_0110
</UL>

<P><STRONG><a name="[d]"></a>DiagSid_Deal10</STRONG> (Thumb, 390 bytes, Stack size 24 bytes, diagsid.o(i.DiagSid_Deal10))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = DiagSid_Deal10 &rArr; CanDiag_Init &rArr; CanDiag_FactoryModeCheck &rArr; DiagDid_ReadFromEep &rArr; CanDiag_ReadFromEep &rArr; EEPROM_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSign_ModeTesterStop
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_ProgReqSet
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_PosResponse
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_NegResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> candiag.o(i.CanDiag_Dispatcher)
</UL>
<P><STRONG><a name="[e]"></a>DiagSid_Deal11</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, diagsid.o(i.DiagSid_Deal11))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DiagSid_Deal11 &rArr; CanDiag_NegResponse &rArr; CAN_SenMsg &rArr; FLEXCAN_TxData &rArr; FLEXCAN_UpdateMbInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_PosResponse
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_NegResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> candiag.o(i.CanDiag_Dispatcher)
</UL>
<P><STRONG><a name="[f]"></a>DiagSid_Deal14</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, diagsid.o(i.DiagSid_Deal14))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DiagSid_Deal14 &rArr; CanDiag_NegResponse &rArr; CAN_SenMsg &rArr; FLEXCAN_TxData &rArr; FLEXCAN_UpdateMbInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSub_Deal14
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_NegResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> candiag.o(i.CanDiag_Dispatcher)
</UL>
<P><STRONG><a name="[10]"></a>DiagSid_Deal19</STRONG> (Thumb, 456 bytes, Stack size 16 bytes, diagsid.o(i.DiagSid_Deal19))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DiagSid_Deal19 &rArr; CanDiag_NegResponse &rArr; CAN_SenMsg &rArr; FLEXCAN_TxData &rArr; FLEXCAN_UpdateMbInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSub_Deal190A
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSub_Deal1906
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSub_Deal1904
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSub_Deal1902
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSub_Deal1901
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_PosResponse
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_NegResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> candiag.o(i.CanDiag_Dispatcher)
</UL>
<P><STRONG><a name="[11]"></a>DiagSid_Deal22</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, diagsid.o(i.DiagSid_Deal22))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = DiagSid_Deal22 &rArr; DiagSub_Deal22
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSub_Deal22
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_PosResponse
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_NegResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> candiag.o(i.CanDiag_Dispatcher)
</UL>
<P><STRONG><a name="[12]"></a>DiagSid_Deal27</STRONG> (Thumb, 422 bytes, Stack size 24 bytes, diagsid.o(i.DiagSid_Deal27))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = DiagSid_Deal27 &rArr; DiagSub_Deal2702 &rArr; Seed2Key &rArr; AES_Cipher &rArr; MixColumns &rArr; FFmul
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSub_Deal2702
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSub_Deal2701
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_SecurityGet
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_PosResponse
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_NegResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> candiag.o(i.CanDiag_Dispatcher)
</UL>
<P><STRONG><a name="[13]"></a>DiagSid_Deal28</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, diagsid.o(i.DiagSid_Deal28))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DiagSid_Deal28 &rArr; CanDiag_NegResponse &rArr; CAN_SenMsg &rArr; FLEXCAN_TxData &rArr; FLEXCAN_UpdateMbInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_PosResponse
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_NegResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> candiag.o(i.CanDiag_Dispatcher)
</UL>
<P><STRONG><a name="[14]"></a>DiagSid_Deal2E</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, diagsid.o(i.DiagSid_Deal2E))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DiagSid_Deal2E &rArr; CanDiag_NegResponse &rArr; CAN_SenMsg &rArr; FLEXCAN_TxData &rArr; FLEXCAN_UpdateMbInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSub_Deal2E
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_PosResponse
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_NegResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> candiag.o(i.CanDiag_Dispatcher)
</UL>
<P><STRONG><a name="[15]"></a>DiagSid_Deal2F</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, diagsid.o(i.DiagSid_Deal2F))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DiagSid_Deal2F &rArr; CanDiag_NegResponse &rArr; CAN_SenMsg &rArr; FLEXCAN_TxData &rArr; FLEXCAN_UpdateMbInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSub_Deal2F
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_SecurityGet
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_PosResponse
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_NegResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> candiag.o(i.CanDiag_Dispatcher)
</UL>
<P><STRONG><a name="[16]"></a>DiagSid_Deal31</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, diagsid.o(i.DiagSid_Deal31))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DiagSid_Deal31 &rArr; CanDiag_NegResponse &rArr; CAN_SenMsg &rArr; FLEXCAN_TxData &rArr; FLEXCAN_UpdateMbInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSub_Deal31
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_PosResponse
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_NegResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> candiag.o(i.CanDiag_Dispatcher)
</UL>
<P><STRONG><a name="[17]"></a>DiagSid_Deal3E</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, diagsid.o(i.DiagSid_Deal3E))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DiagSid_Deal3E &rArr; CanDiag_NegResponse &rArr; CAN_SenMsg &rArr; FLEXCAN_TxData &rArr; FLEXCAN_UpdateMbInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_PosResponse
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_NegResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> candiag.o(i.CanDiag_Dispatcher)
</UL>
<P><STRONG><a name="[18]"></a>DiagSid_Deal85</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, diagsid.o(i.DiagSid_Deal85))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DiagSid_Deal85 &rArr; CanDiag_NegResponse &rArr; CAN_SenMsg &rArr; FLEXCAN_TxData &rArr; FLEXCAN_UpdateMbInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_PosResponse
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_NegResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> candiag.o(i.CanDiag_Dispatcher)
</UL>
<P><STRONG><a name="[162]"></a>DiagSub_Deal14</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, diagsub.o(i.DiagSub_Deal14))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DiagSub_Deal14 &rArr; Dtc_ClrDtc
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_ClrDtc
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal14
</UL>

<P><STRONG><a name="[163]"></a>DiagSub_Deal1901</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, diagsub.o(i.DiagSub_Deal1901))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DiagSub_Deal1901
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal19
</UL>

<P><STRONG><a name="[164]"></a>DiagSub_Deal1902</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, diagsub.o(i.DiagSub_Deal1902))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DiagSub_Deal1902
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal19
</UL>

<P><STRONG><a name="[165]"></a>DiagSub_Deal1904</STRONG> (Thumb, 1088 bytes, Stack size 20 bytes, diagsub.o(i.DiagSub_Deal1904))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DiagSub_Deal1904
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal19
</UL>

<P><STRONG><a name="[166]"></a>DiagSub_Deal1906</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, diagsub.o(i.DiagSub_Deal1906))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DiagSub_Deal1906
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal19
</UL>

<P><STRONG><a name="[167]"></a>DiagSub_Deal190A</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, diagsub.o(i.DiagSub_Deal190A))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DiagSub_Deal190A
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal19
</UL>

<P><STRONG><a name="[168]"></a>DiagSub_Deal22</STRONG> (Thumb, 206 bytes, Stack size 544 bytes, diagsub.o(i.DiagSub_Deal22))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = DiagSub_Deal22
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal22
</UL>

<P><STRONG><a name="[169]"></a>DiagSub_Deal2701</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, diagsub.o(i.DiagSub_Deal2701))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DiagSub_Deal2701 &rArr; CanDiag_AccessInvalidRead &rArr; CanDiag_ReadFromEep &rArr; EEPROM_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateRandom
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_SecurityGet
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_AccessInvalidWrite
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_AccessInvalidRead
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_AccessDelaySet
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal27
</UL>

<P><STRONG><a name="[16a]"></a>DiagSub_Deal2702</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, diagsub.o(i.DiagSub_Deal2702))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DiagSub_Deal2702 &rArr; Seed2Key &rArr; AES_Cipher &rArr; MixColumns &rArr; FFmul
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seed2Key
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_AccessInvalidWrite
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_AccessInvalidRead
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_AccessDelaySet
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_AccessDelayClr
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal27
</UL>

<P><STRONG><a name="[16b]"></a>DiagSub_Deal2E</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, diagsub.o(i.DiagSub_Deal2E))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DiagSub_Deal2E
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal2E
</UL>

<P><STRONG><a name="[16c]"></a>DiagSub_Deal2F</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, diagsub.o(i.DiagSub_Deal2F))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DiagSub_Deal2F
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal2F
</UL>

<P><STRONG><a name="[16d]"></a>DiagSub_Deal31</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, diagsub.o(i.DiagSub_Deal31))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSid_Deal31
</UL>

<P><STRONG><a name="[1d7]"></a>DisplayModeSet</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, display.o(i.DisplayModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyHeat
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCooL
</UL>

<P><STRONG><a name="[1e2]"></a>DisplayTempSet</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, display.o(i.DisplayTempSet))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTempDec
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTempAdd
</UL>

<P><STRONG><a name="[16e]"></a>Dtc_ClrDtc</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, dtc.o(i.Dtc_ClrDtc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Dtc_ClrDtc
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSub_Deal14
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_Init
</UL>

<P><STRONG><a name="[176]"></a>Dtc_EnableMomentGet</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dtc.o(i.Dtc_EnableMomentGet))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_ResetFlag
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_OprCycleStart
</UL>

<P><STRONG><a name="[171]"></a>Dtc_Init</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, dtc.o(i.Dtc_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Dtc_Init &rArr; Dtc_WriteEepTask &rArr; Dtc_WriteOneToEep &rArr; EepApp_LoadWrtMsg &rArr; EepAll_LoadWrtMsg &rArr; EepAll_WrtMsg &rArr; EepAll_WrtMsgCopyToBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_WriteEepTask
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_ReadOneFromEep
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_OprCycleStop
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_OprCycleStart
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_ClrDtc
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_Init
</UL>

<P><STRONG><a name="[174]"></a>Dtc_OprCycleStart</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, dtc.o(i.Dtc_OprCycleStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Dtc_OprCycleStart
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_EnableMomentGet
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_Init
</UL>

<P><STRONG><a name="[173]"></a>Dtc_OprCycleStop</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dtc.o(i.Dtc_OprCycleStop))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_Init
</UL>

<P><STRONG><a name="[172]"></a>Dtc_ReadOneFromEep</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, dtc.o(i.Dtc_ReadOneFromEep))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Dtc_ReadOneFromEep &rArr; EepApp_LoadRadMsg &rArr; EepAll_LoadRadMsg &rArr; EepAll_RadMsg &rArr; EEPROM_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_Crc8
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepApp_LoadRadMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_Init
</UL>

<P><STRONG><a name="[150]"></a>Dtc_ResetFlag</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, dtc.o(i.Dtc_ResetFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Dtc_ResetFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_EnableMomentGet
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSign_UpdateVehPower
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_UpdateCtrlFlagTask
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_UpdateBattFlagTask
</UL>

<P><STRONG><a name="[177]"></a>Dtc_StatTask</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dtc.o(i.Dtc_StatTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Dtc_StatTask &rArr; Dtc_WriteEepTask &rArr; Dtc_WriteOneToEep &rArr; EepApp_LoadWrtMsg &rArr; EepAll_LoadWrtMsg &rArr; EepAll_WrtMsg &rArr; EepAll_WrtMsgCopyToBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_WriteEepTask
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_HandleTask
</UL>

<P><STRONG><a name="[178]"></a>Dtc_TimeTask</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dtc.o(i.Dtc_TimeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Dtc_TimeTask &rArr; Dtc_UpdateDtcTask &rArr; Dtc_UpdateCtrlFlagTask &rArr; Dtc_ResetFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_UpdateDtcTask
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_Period10msTask
</UL>

<P><STRONG><a name="[17a]"></a>Dtc_UpdateBattFlagTask</STRONG> (Thumb, 568 bytes, Stack size 16 bytes, dtc.o(i.Dtc_UpdateBattFlagTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Dtc_UpdateBattFlagTask &rArr; Dtc_ResetFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_OnLine
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_OffLine
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_ResetFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_UpdateDtcTask
</UL>

<P><STRONG><a name="[17b]"></a>Dtc_UpdateCtrlFlagTask</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, dtc.o(i.Dtc_UpdateCtrlFlagTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Dtc_UpdateCtrlFlagTask &rArr; Dtc_ResetFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_ResetFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_UpdateDtcTask
</UL>

<P><STRONG><a name="[17c]"></a>Dtc_UpdateDtcBuf</STRONG> (Thumb, 576 bytes, Stack size 24 bytes, dtc.o(i.Dtc_UpdateDtcBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Dtc_UpdateDtcBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_EnableIRQGlobal
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_DisableIRQGlobal
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_UpdateDTC
</UL>

<P><STRONG><a name="[179]"></a>Dtc_UpdateDtcTask</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, dtc.o(i.Dtc_UpdateDtcTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Dtc_UpdateDtcTask &rArr; Dtc_UpdateCtrlFlagTask &rArr; Dtc_ResetFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_UpdateCtrlFlagTask
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_UpdateBattFlagTask
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_TimeTask
</UL>

<P><STRONG><a name="[175]"></a>Dtc_WriteEepTask</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, dtc.o(i.Dtc_WriteEepTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Dtc_WriteEepTask &rArr; Dtc_WriteOneToEep &rArr; EepApp_LoadWrtMsg &rArr; EepAll_LoadWrtMsg &rArr; EepAll_WrtMsg &rArr; EepAll_WrtMsgCopyToBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_WriteOneToEep
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_StatTask
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_Init
</UL>

<P><STRONG><a name="[17d]"></a>Dtc_WriteOneToEep</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, dtc.o(i.Dtc_WriteOneToEep))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Dtc_WriteOneToEep &rArr; EepApp_LoadWrtMsg &rArr; EepAll_LoadWrtMsg &rArr; EepAll_WrtMsg &rArr; EepAll_WrtMsgCopyToBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc_Crc8
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepApp_LoadWrtMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_WriteEepTask
</UL>

<P><STRONG><a name="[158]"></a>EDMA_DRV_ErrorIRQHandler</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, edma_driver.o(i.EDMA_DRV_ErrorIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = EDMA_DRV_ErrorIRQHandler &rArr; EDMA_DRV_ClearIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_SetDmaRequestCmd
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ClearIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Error_IRQHandler
</UL>

<P><STRONG><a name="[157]"></a>EDMA_DRV_GetDmaRegBaseAddr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, edma_driver.o(i.EDMA_DRV_GetDmaRegBaseAddr))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Error_IRQHandler
</UL>

<P><STRONG><a name="[156]"></a>EDMA_DRV_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, edma_driver.o(i.EDMA_DRV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EDMA_DRV_IRQHandler &rArr; EDMA_DRV_ClearIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ClearIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA3_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_IRQHandler
</UL>

<P><STRONG><a name="[17e]"></a>EDMA_SetDmaRequestCmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, edma_hw_access.o(i.EDMA_SetDmaRequestCmd))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ErrorIRQHandler
</UL>

<P><STRONG><a name="[180]"></a>EEPROM_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, eeprom.o(i.EEPROM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EEPROM_Init &rArr; EEPROM_SetFlexRam &rArr; EEPROM_CmdSequence
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SetFlexRam
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ProgPartition
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepAll_Init
</UL>

<P><STRONG><a name="[133]"></a>EEPROM_Read</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, eeprom.o(i.EEPROM_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EEPROM_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepAll_RadMsg
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_ReadFromEep
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_ReadFromEep
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepAll_DealWrtBuf
</UL>

<P><STRONG><a name="[13e]"></a>EEPROM_Write</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, eeprom.o(i.EEPROM_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EEPROM_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_WriteToEep
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_ReadFromEep
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_WriteToEep
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepAll_DealWrtBuf
</UL>

<P><STRONG><a name="[184]"></a>EEpromInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, bsp_eeprom.o(i.EEpromInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = EEpromInit &rArr; WriteTempEeprom &rArr; __RTE_AppEepromWrite &rArr; __DiagTask_EEPWrite &rArr; CarSign_WriteToEep &rArr; EepApp_LoadWrtMsg &rArr; EepAll_LoadWrtMsg &rArr; EepAll_WrtMsg &rArr; EepAll_WrtMsgCopyToBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTempEeprom
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTempEeprom
</UL>

<P><STRONG><a name="[186]"></a>EepAll_DealWrtBuf</STRONG> (Thumb, 294 bytes, Stack size 48 bytes, eepall.o(i.EepAll_DealWrtBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = EepAll_DealWrtBuf &rArr; EEPROM_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Out
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_EEPTask
</UL>

<P><STRONG><a name="[192]"></a>EepAll_GetWrtBufIdleSize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, eepall.o(i.EepAll_GetWrtBufIdleSize))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepApp_LoadWrtMsg
</UL>

<P><STRONG><a name="[189]"></a>EepAll_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, eepall.o(i.EepAll_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EepAll_Init &rArr; EEPROM_Init &rArr; EEPROM_SetFlexRam &rArr; EEPROM_CmdSequence
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepAll_InitWrtMsg
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepAll_InitWrtBuf
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepAll_InitRadMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_Init
</UL>

<P><STRONG><a name="[18d]"></a>EepAll_LoadRadMsg</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, eepall.o(i.EepAll_LoadRadMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = EepAll_LoadRadMsg &rArr; EepAll_RadMsg &rArr; EEPROM_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepAll_RadMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepApp_LoadRadMsg
</UL>

<P><STRONG><a name="[18f]"></a>EepAll_LoadWrtMsg</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, eepall.o(i.EepAll_LoadWrtMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = EepAll_LoadWrtMsg &rArr; EepAll_WrtMsg &rArr; EepAll_WrtMsgCopyToBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepAll_WrtMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepApp_LoadWrtMsg
</UL>

<P><STRONG><a name="[149]"></a>EepApp_LoadRadMsg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eepapp.o(i.EepApp_LoadRadMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = EepApp_LoadRadMsg &rArr; EepAll_LoadRadMsg &rArr; EepAll_RadMsg &rArr; EEPROM_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepAll_LoadRadMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSign_ReadFromEep
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_ReadOneFromEep
</UL>

<P><STRONG><a name="[152]"></a>EepApp_LoadWrtMsg</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, eepapp.o(i.EepApp_LoadWrtMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = EepApp_LoadWrtMsg &rArr; EepAll_LoadWrtMsg &rArr; EepAll_WrtMsg &rArr; EepAll_WrtMsgCopyToBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepAll_LoadWrtMsg
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepAll_GetWrtBufIdleSize
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSign_WriteToEep
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_WriteOneToEep
</UL>

<P><STRONG><a name="[193]"></a>EepromProcess</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, bsp_eeprom.o(i.EepromProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = EepromProcess &rArr; WriteTempEeprom &rArr; __RTE_AppEepromWrite &rArr; __DiagTask_EEPWrite &rArr; CarSign_WriteToEep &rArr; EepApp_LoadWrtMsg &rArr; EepAll_LoadWrtMsg &rArr; EepAll_WrtMsg &rArr; EepAll_WrtMsgCopyToBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTempEeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysRuning
</UL>

<P><STRONG><a name="[194]"></a>EventCollect</STRONG> (Thumb, 184 bytes, Stack size 4 bytes, clib.o(i.EventCollect))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EventCollect
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysRuning
</UL>

<P><STRONG><a name="[b4]"></a>FLEXCAN0_InitReg</STRONG> (Thumb, 402 bytes, Stack size 8 bytes, flexcan.o(i.FLEXCAN0_InitReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = FLEXCAN0_InitReg &rArr; FLEXCAN_SetMaxMsgBuffNum &rArr; FLEXCAN_GetMsgBuffRegion &rArr; FLEXCAN_GetPayloadSize
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_EnableIRQ
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_DisableIRQ
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetPayloadSize
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetOperationMode
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetMaxMsgBuffNum
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetErrIntCmd
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_EnterFreezeMode
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Enable
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Disable
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_MbCfgForTx
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_MbCfgForRx
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm2_BusOffEntry
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[198]"></a>FLEXCAN_Disable</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, flexcan_hw_access.o(i.FLEXCAN_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN0_InitReg
</UL>

<P><STRONG><a name="[199]"></a>FLEXCAN_Enable</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, flexcan_hw_access.o(i.FLEXCAN_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN0_InitReg
</UL>

<P><STRONG><a name="[197]"></a>FLEXCAN_EnterFreezeMode</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, flexcan_hw_access.o(i.FLEXCAN_EnterFreezeMode))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetOperationMode
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_MbCfgForRx
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN0_InitReg
</UL>

<P><STRONG><a name="[1a6]"></a>FLEXCAN_ExitFreezeMode</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, flexcan_hw_access.o(i.FLEXCAN_ExitFreezeMode))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_MbCfgForRx
</UL>

<P><STRONG><a name="[1a2]"></a>FLEXCAN_GetMaxMbNum</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, flexcan_hw_access.o(i.FLEXCAN_GetMaxMbNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLEXCAN_GetMaxMbNum
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetMaxMsgBuffNum
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ClearRAM
</UL>

<P><STRONG><a name="[1a3]"></a>FLEXCAN_GetMsgBuffRegion</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, flexcan_hw_access.o(i.FLEXCAN_GetMsgBuffRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FLEXCAN_GetMsgBuffRegion &rArr; FLEXCAN_GetPayloadSize
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetPayloadSize
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetMaxMsgBuffNum
</UL>

<P><STRONG><a name="[1a4]"></a>FLEXCAN_GetPayloadSize</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, flexcan_hw_access.o(i.FLEXCAN_GetPayloadSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXCAN_GetPayloadSize
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IsFDEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetMaxMsgBuffNum
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetMsgBuffRegion
</UL>

<P><STRONG><a name="[19a]"></a>FLEXCAN_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, flexcan_hw_access.o(i.FLEXCAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLEXCAN_Init &rArr; FLEXCAN_ClearRAM &rArr; FLEXCAN_GetMaxMbNum
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ClearRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN0_InitReg
</UL>

<P><STRONG><a name="[1a0]"></a>FLEXCAN_SetErrIntCmd</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, flexcan_hw_access.o(i.FLEXCAN_SetErrIntCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLEXCAN_SetErrIntCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN0_InitReg
</UL>

<P><STRONG><a name="[19c]"></a>FLEXCAN_SetMaxMsgBuffNum</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, flexcan_hw_access.o(i.FLEXCAN_SetMaxMsgBuffNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FLEXCAN_SetMaxMsgBuffNum &rArr; FLEXCAN_GetMsgBuffRegion &rArr; FLEXCAN_GetPayloadSize
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetPayloadSize
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetMsgBuffRegion
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetMaxMbNum
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN0_InitReg
</UL>

<P><STRONG><a name="[19d]"></a>FLEXCAN_SetOperationMode</STRONG> (Thumb, 136 bytes, Stack size 12 bytes, flexcan_hw_access.o(i.FLEXCAN_SetOperationMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLEXCAN_SetOperationMode &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_EnterFreezeMode
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN0_InitReg
</UL>

<P><STRONG><a name="[19b]"></a>FLEXCAN_SetPayloadSize</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, flexcan_hw_access.o(i.FLEXCAN_SetPayloadSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXCAN_SetPayloadSize
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_IsFDEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN0_InitReg
</UL>

<P><STRONG><a name="[b7]"></a>FLEXCAN_TxData</STRONG> (Thumb, 346 bytes, Stack size 40 bytes, flexcan.o(i.FLEXCAN_TxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FLEXCAN_TxData &rArr; FLEXCAN_UpdateMbInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_UpdateMbInfo
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_EnableIRQGlobal
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_DisableIRQGlobal
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SenMsg
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FactoryProcess
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBusState_318
</UL>

<P><STRONG><a name="[46]"></a>FTM0_Ovf_Reload_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys.o(i.FTM0_Ovf_Reload_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FTM0_Ovf_Reload_IRQHandler &rArr; FTM_DRV_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_ClearStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[1a8]"></a>FTM_Config</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sys.o(i.FTM_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = FTM_Config &rArr; FTM_DRV_Init &rArr; FTM_DRV_GetFrequency &rArr; CLOCK_SYS_GetFreq &rArr; CLOCK_DRV_GetFreq &rArr; CLOCK_SYS_GetPccClockFreq &rArr; CLOCK_SYS_GetPeripheralClock &rArr; CLOCK_SYS_GetSysAsyncFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_UpdatePwmChannel
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwm
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[1a7]"></a>FTM_DRV_ClearStatusFlags</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, ftm_common.o(i.FTM_DRV_ClearStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FTM_DRV_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM0_Ovf_Reload_IRQHandler
</UL>

<P><STRONG><a name="[1ac]"></a>FTM_DRV_ConvertFreqToPeriodTicks</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, ftm_common.o(i.FTM_DRV_ConvertFreqToPeriodTicks))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FTM_DRV_ConvertFreqToPeriodTicks
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwm
</UL>

<P><STRONG><a name="[1ad]"></a>FTM_DRV_GetFrequency</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, ftm_common.o(i.FTM_DRV_GetFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FTM_DRV_GetFrequency &rArr; CLOCK_SYS_GetFreq &rArr; CLOCK_DRV_GetFreq &rArr; CLOCK_SYS_GetPccClockFreq &rArr; CLOCK_SYS_GetPeripheralClock &rArr; CLOCK_SYS_GetSysAsyncFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFreq
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_Init
</UL>

<P><STRONG><a name="[1a9]"></a>FTM_DRV_Init</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, ftm_common.o(i.FTM_DRV_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = FTM_DRV_Init &rArr; FTM_DRV_GetFrequency &rArr; CLOCK_SYS_GetFreq &rArr; CLOCK_DRV_GetFreq &rArr; CLOCK_SYS_GetPccClockFreq &rArr; CLOCK_SYS_GetPeripheralClock &rArr; CLOCK_SYS_GetSysAsyncFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_EnableIRQ
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_DisableIRQ
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_Reset
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitModule
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_SetSync
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_GetFrequency
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_SetTimerOverflowInt
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_Config
</UL>

<P><STRONG><a name="[1af]"></a>FTM_DRV_InitModule</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ftm_hw_access.o(i.FTM_DRV_InitModule))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_Init
</UL>

<P><STRONG><a name="[1aa]"></a>FTM_DRV_InitPwm</STRONG> (Thumb, 606 bytes, Stack size 48 bytes, ftm_pwm_driver.o(i.FTM_DRV_InitPwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = FTM_DRV_InitPwm &rArr; FTM_DRV_InitPwmDutyCycleChannel &rArr; FTM_DRV_UpdatePwmChannel &rArr; FTM_DRV_SetSoftwareTriggerCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_SetMod
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_SetFaultInt
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_SetFaultControlMode
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_SetDeadtimePrescale
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_SetDeadtimeCount
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_SetCpwms
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_SetClockSource
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwmIndependentChannel
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwmDutyCycleChannel
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwmCombinedChannel
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_ConvertFreqToPeriodTicks
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_Config
</UL>

<P><STRONG><a name="[1ae]"></a>FTM_DRV_Reset</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, ftm_hw_access.o(i.FTM_DRV_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FTM_DRV_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_Init
</UL>

<P><STRONG><a name="[1c7]"></a>FTM_DRV_SetChnTriggerCmd</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, ftm_hw_access.o(i.FTM_DRV_SetChnTriggerCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FTM_DRV_SetChnTriggerCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwmIndependentChannel
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwmCombinedChannel
</UL>

<P><STRONG><a name="[1b0]"></a>FTM_DRV_SetSync</STRONG> (Thumb, 572 bytes, Stack size 24 bytes, ftm_common.o(i.FTM_DRV_SetSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FTM_DRV_SetSync &rArr; FTM_DRV_SetHardwareSyncTriggerSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_SetHardwareSyncTriggerSrc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_Init
</UL>

<P><STRONG><a name="[1ab]"></a>FTM_DRV_UpdatePwmChannel</STRONG> (Thumb, 338 bytes, Stack size 56 bytes, ftm_pwm_driver.o(i.FTM_DRV_UpdatePwmChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FTM_DRV_UpdatePwmChannel &rArr; FTM_DRV_SetSoftwareTriggerCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_SetSoftwareTriggerCmd
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_SetChnCountVal
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_Config
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwmDutyCycleChannel
</UL>

<P><STRONG><a name="[1cb]"></a>FactoryProcess</STRONG> (Thumb, 2190 bytes, Stack size 16 bytes, factory.o(i.FactoryProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FactoryProcess &rArr; FLEXCAN_TxData &rArr; FLEXCAN_UpdateMbInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TxData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINS_DRV_WritePin
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINS_DRV_ReadPins
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenYaSuoJi_1
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysRest
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ForceOutput
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysRuning
</UL>

<P><STRONG><a name="[21f]"></a>Flag_Init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, flag.o(i.Flag_Init))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[1d0]"></a>ForceOutput</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, sysrun.o(i.ForceOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ForceOutput &rArr; __RTE_2FModeOnSt
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RTE_ClrRcv2FMsgSt
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RTE_2FModeOnSt
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysRuning
</UL>

<P><STRONG><a name="[160]"></a>GetDataFromRom</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, diagdid.o(i.GetDataFromRom))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GetDataFromRom
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_Read_F199
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_Read_F195
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_Read_F193
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_Read_F190
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_Read_F18E
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_Read_F18C
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_Read_F189
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_Read_F187
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_Read_F184
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_Read_F180
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_Read_F17F
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_Read_F103
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_Read_F102
</UL>

<P><STRONG><a name="[8c]"></a>GetavergeADValue</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, bsp_adcollect.o(i.GetavergeADValue))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCollectProcess
</UL>

<P><STRONG><a name="[24b]"></a>HeatPWM_ioProcess</STRONG> (Thumb, 302 bytes, Stack size 0 bytes, sysrun.o(i.HeatPWM_ioProcess))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysRuning
</UL>

<P><STRONG><a name="[1d3]"></a>HeatProcess</STRONG> (Thumb, 422 bytes, Stack size 8 bytes, sysrun.o(i.HeatProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HeatProcess &rArr; PINS_DRV_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINS_DRV_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysRuning
</UL>

<P><STRONG><a name="[1d4]"></a>HuoErIOProcess</STRONG> (Thumb, 382 bytes, Stack size 8 bytes, sysrun.o(i.HuoErIOProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HuoErIOProcess &rArr; PINS_DRV_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINS_DRV_WritePin
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPause
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysRuning
</UL>

<P><STRONG><a name="[f4]"></a>INT_SYS_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, interrupt_manager.o(i.INT_SYS_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN0_InitReg
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_DealRcvBuf
</UL>

<P><STRONG><a name="[f1]"></a>INT_SYS_DisableIRQGlobal</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, interrupt_manager.o(i.INT_SYS_DisableIRQGlobal))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TxData
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_CmdSequence (via Veneer)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_UpdateConfiguration
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_Config
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_SemaPost
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_UpdateDtcBuf
</UL>

<P><STRONG><a name="[f5]"></a>INT_SYS_EnableIRQ</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, interrupt_manager.o(i.INT_SYS_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN0_InitReg
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_DRV_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_InitReg
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_DealRcvBuf
</UL>

<P><STRONG><a name="[f2]"></a>INT_SYS_EnableIRQGlobal</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, interrupt_manager.o(i.INT_SYS_EnableIRQGlobal))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TxData
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_CmdSequence (via Veneer)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_UpdateConfiguration
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_Config
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_SemaPost
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_UpdateDtcBuf
</UL>

<P><STRONG><a name="[1e1]"></a>KeyChouTi</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, key.o(i.KeyChouTi))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyShortPressFunc
</UL>

<P><STRONG><a name="[1d6]"></a>KeyCooL</STRONG> (Thumb, 412 bytes, Stack size 8 bytes, key.o(i.KeyCooL))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KeyCooL &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayModeSet
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyShortPressFunc
</UL>

<P><STRONG><a name="[24e]"></a>KeyEnterFactory</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, key.o(i.KeyEnterFactory))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysRuning
</UL>

<P><STRONG><a name="[1d8]"></a>KeyHeat</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, key.o(i.KeyHeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KeyHeat
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyShortPressFunc
</UL>

<P><STRONG><a name="[1d9]"></a>KeyLongPressFunc</STRONG> (Thumb, 384 bytes, Stack size 8 bytes, key.o(i.KeyLongPressFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = KeyLongPressFunc &rArr; KeyTempDec &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDelayCnt
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetValidJudgment
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTempDec
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTempAdd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess
</UL>

<P><STRONG><a name="[bc]"></a>KeyPower</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, key.o(i.KeyPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = KeyPower &rArr; ReadTempEeprom &rArr; EEpromInit &rArr; WriteTempEeprom &rArr; __RTE_AppEepromWrite &rArr; __DiagTask_EEPWrite &rArr; CarSign_WriteToEep &rArr; EepApp_LoadWrtMsg &rArr; EepAll_LoadWrtMsg &rArr; EepAll_WrtMsg &rArr; EepAll_WrtMsgCopyToBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysRest
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTempEeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBusState_318
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TELProcess
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCProcess
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyShortPressFunc
</UL>

<P><STRONG><a name="[1dd]"></a>KeyProcess</STRONG> (Thumb, 324 bytes, Stack size 8 bytes, key.o(i.KeyProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = KeyProcess &rArr; KeyShortPressFunc &rArr; KeyPower &rArr; ReadTempEeprom &rArr; EEpromInit &rArr; WriteTempEeprom &rArr; __RTE_AppEepromWrite &rArr; __DiagTask_EEPWrite &rArr; CarSign_WriteToEep &rArr; EepApp_LoadWrtMsg &rArr; EepAll_LoadWrtMsg &rArr; EepAll_WrtMsg &rArr; EepAll_WrtMsgCopyToBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RTE_5sAppMsgTriggerByLocalEvent_Start
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyShortPressFunc_1
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyShortPressFunc
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLongPressFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysRuning
</UL>

<P><STRONG><a name="[1df]"></a>KeyShortPressFunc</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, key.o(i.KeyShortPressFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = KeyShortPressFunc &rArr; KeyPower &rArr; ReadTempEeprom &rArr; EEpromInit &rArr; WriteTempEeprom &rArr; __RTE_AppEepromWrite &rArr; __DiagTask_EEPWrite &rArr; CarSign_WriteToEep &rArr; EepApp_LoadWrtMsg &rArr; EepAll_LoadWrtMsg &rArr; EepAll_WrtMsg &rArr; EepAll_WrtMsgCopyToBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTempDec
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTempAdd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPower
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyHeat
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCooL
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyChouTi
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess
</UL>

<P><STRONG><a name="[1e0]"></a>KeyShortPressFunc_1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, key.o(i.KeyShortPressFunc_1))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess
</UL>

<P><STRONG><a name="[1da]"></a>KeyTempAdd</STRONG> (Thumb, 552 bytes, Stack size 8 bytes, key.o(i.KeyTempAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KeyTempAdd &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTempSet
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyShortPressFunc
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLongPressFunc
</UL>

<P><STRONG><a name="[1db]"></a>KeyTempDec</STRONG> (Thumb, 586 bytes, Stack size 8 bytes, key.o(i.KeyTempDec))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KeyTempDec &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTempSet
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyShortPressFunc
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLongPressFunc
</UL>

<P><STRONG><a name="[218]"></a>LED_Blink</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, display.o(i.LED_Blink))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataDiaplay
</UL>

<P><STRONG><a name="[1cf]"></a>LED_ForceOutput</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, bsp_led.o(i.LED_ForceOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LED_ForceOutput &rArr; PINS_DRV_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINS_DRV_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FactoryProcess
</UL>

<P><STRONG><a name="[1e3]"></a>LED_Process</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, bsp_led.o(i.LED_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LED_Process &rArr; PINS_DRV_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINS_DRV_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysRuning
</UL>

<P><STRONG><a name="[52]"></a>LPSPI0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lpspi_irq.o(i.LPSPI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LPSPI0_IRQHandler &rArr; LPSPI_DRV_IRQHandler &rArr; LPSPI_DRV_MasterIRQHandler &rArr; LPSPI_DRV_MasterAbortTransfer &rArr; LPSPI_DRV_MasterCompleteTransfer &rArr; LPSPI_DRV_DisableTEIEInterrupts &rArr; LPSPI_SetIntMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[1e7]"></a>LPSPI_ClearStatusFlag</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lpspi_hw_access.o(i.LPSPI_ClearStatusFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_DisableTEIEInterrupts
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_MasterIRQHandler
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_MasterCompleteTransfer
</UL>

<P><STRONG><a name="[1e5]"></a>LPSPI_DRV_DisableTEIEInterrupts</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lpspi_shared_function.o(i.LPSPI_DRV_DisableTEIEInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPSPI_DRV_DisableTEIEInterrupts &rArr; LPSPI_SetIntMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_ClearStatusFlag
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SetIntMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_SlaveAbortTransfer
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_MasterCompleteTransfer
</UL>

<P><STRONG><a name="[1e8]"></a>LPSPI_DRV_FillupTxBuffer</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, lpspi_shared_function.o(i.LPSPI_DRV_FillupTxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPSPI_DRV_FillupTxBuffer &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_SlaveIRQHandler
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_MasterIRQHandler
</UL>

<P><STRONG><a name="[1e4]"></a>LPSPI_DRV_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lpspi_shared_function.o(i.LPSPI_DRV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LPSPI_DRV_IRQHandler &rArr; LPSPI_DRV_MasterIRQHandler &rArr; LPSPI_DRV_MasterAbortTransfer &rArr; LPSPI_DRV_MasterCompleteTransfer &rArr; LPSPI_DRV_DisableTEIEInterrupts &rArr; LPSPI_SetIntMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_SlaveIRQHandler
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_MasterIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI0_IRQHandler
</UL>

<P><STRONG><a name="[1ec]"></a>LPSPI_DRV_MasterAbortTransfer</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lpspi_master_driver.o(i.LPSPI_DRV_MasterAbortTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LPSPI_DRV_MasterAbortTransfer &rArr; LPSPI_DRV_MasterCompleteTransfer &rArr; LPSPI_DRV_DisableTEIEInterrupts &rArr; LPSPI_SetIntMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SetFlushFifoCmd
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_MasterCompleteTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_MasterIRQHandler
</UL>

<P><STRONG><a name="[1ea]"></a>LPSPI_DRV_MasterIRQHandler</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, lpspi_master_driver.o(i.LPSPI_DRV_MasterIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LPSPI_DRV_MasterIRQHandler &rArr; LPSPI_DRV_MasterAbortTransfer &rArr; LPSPI_DRV_MasterCompleteTransfer &rArr; LPSPI_DRV_DisableTEIEInterrupts &rArr; LPSPI_SetIntMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_ClearStatusFlag
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_ReadRXBuffer
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_FillupTxBuffer
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_MasterAbortTransfer
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SetIntMode
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetStatusFlag
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_MasterCompleteTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_IRQHandler
</UL>

<P><STRONG><a name="[1f4]"></a>LPSPI_DRV_ReadRXBuffer</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, lpspi_shared_function.o(i.LPSPI_DRV_ReadRXBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPSPI_DRV_ReadRXBuffer &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_SlaveIRQHandler
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_MasterIRQHandler
</UL>

<P><STRONG><a name="[1f5]"></a>LPSPI_DRV_SlaveAbortTransfer</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, lpspi_slave_driver.o(i.LPSPI_DRV_SlaveAbortTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPSPI_DRV_SlaveAbortTransfer &rArr; LPSPI_DRV_DisableTEIEInterrupts &rArr; LPSPI_SetIntMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SetFlushFifoCmd
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SetTxDmaCmd
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SetRxDmaCmd
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SetIntMode
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_SemaPost
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_DisableTEIEInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_SlaveIRQHandler
</UL>

<P><STRONG><a name="[1eb]"></a>LPSPI_DRV_SlaveIRQHandler</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, lpspi_slave_driver.o(i.LPSPI_DRV_SlaveIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LPSPI_DRV_SlaveIRQHandler &rArr; LPSPI_DRV_SlaveAbortTransfer &rArr; LPSPI_DRV_DisableTEIEInterrupts &rArr; LPSPI_SetIntMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_SlaveAbortTransfer
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SetIntMode
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_GetStatusFlag
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_SemaPost
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_ReadRXBuffer
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_FillupTxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_IRQHandler
</UL>

<P><STRONG><a name="[1ee]"></a>LPSPI_SetFlushFifoCmd</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, lpspi_hw_access.o(i.LPSPI_SetFlushFifoCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LPSPI_SetFlushFifoCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_SlaveAbortTransfer
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_MasterAbortTransfer
</UL>

<P><STRONG><a name="[a6]"></a>LPUART0_InitReg</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, lpuart.o(i.LPUART0_InitReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LPUART0_InitReg &rArr; LPUART0_SetBaudRate &rArr; CLOCK_SYS_GetFreq &rArr; CLOCK_DRV_GetFreq &rArr; CLOCK_SYS_GetPccClockFreq &rArr; CLOCK_SYS_GetPeripheralClock &rArr; CLOCK_SYS_GetSysAsyncFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_EnableIRQ
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_SetParityMode
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_SetIntMode
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_SetBitCountPerChar
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFreq
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_SetBaudRate
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_SetTransmitterCmd
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_SetReceiverCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init
</UL>

<P><STRONG><a name="[57]"></a>LPUART0_RxTx_IRQHandler</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, lpuart.o(i.LPUART0_RxTx_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LPUART0_RxTx_IRQHandler &rArr; LPUART_SetIntMode
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDUART0_RcvByte
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_SetIntMode
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetStatusFlag
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_GetIntMode
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ClearStatusFlag
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Putchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[1fb]"></a>LPUART0_SetBaudRate</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, lpuart.o(i.LPUART0_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LPUART0_SetBaudRate &rArr; CLOCK_SYS_GetFreq &rArr; CLOCK_DRV_GetFreq &rArr; CLOCK_SYS_GetPccClockFreq &rArr; CLOCK_SYS_GetPeripheralClock &rArr; CLOCK_SYS_GetSysAsyncFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFreq
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_InitReg
</UL>

<P><STRONG><a name="[205]"></a>LPUART_ClearStatusFlag</STRONG> (Thumb, 284 bytes, Stack size 12 bytes, lpuart_hw_access.o(i.LPUART_ClearStatusFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LPUART_ClearStatusFlag &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_RxTx_IRQHandler
</UL>

<P><STRONG><a name="[201]"></a>LPUART_GetIntMode</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, lpuart_hw_access.o(i.LPUART_GetIntMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART_GetIntMode
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_RxTx_IRQHandler
</UL>

<P><STRONG><a name="[202]"></a>LPUART_GetStatusFlag</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, lpuart_hw_access.o(i.LPUART_GetStatusFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART_GetStatusFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_RxTx_IRQHandler
</UL>

<P><STRONG><a name="[1fa]"></a>LPUART_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lpuart_hw_access.o(i.LPUART_Init))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_InitReg
</UL>

<P><STRONG><a name="[1fc]"></a>LPUART_SetBitCountPerChar</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, lpuart_hw_access.o(i.LPUART_SetBitCountPerChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LPUART_SetBitCountPerChar
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_InitReg
</UL>

<P><STRONG><a name="[200]"></a>LPUART_SetIntMode</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, lpuart_hw_access.o(i.LPUART_SetIntMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LPUART_SetIntMode
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_RxTx_IRQHandler
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_InitReg
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataDiaplay
</UL>

<P><STRONG><a name="[1fd]"></a>LPUART_SetParityMode</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lpuart_hw_access.o(i.LPUART_SetParityMode))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_InitReg
</UL>

<P><STRONG><a name="[1f2]"></a>OSIF_SemaPost</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, osif_baremetal.o(i.OSIF_SemaPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSIF_SemaPost
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_EnableIRQGlobal
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_DisableIRQGlobal
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_SlaveAbortTransfer
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_SlaveIRQHandler
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_MasterCompleteTransfer
</UL>

<P><STRONG><a name="[155]"></a>OpenYaSuoJi_1</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, sysrun.o(i.OpenYaSuoJi_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OpenYaSuoJi_1 &rArr; PINS_DRV_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINS_DRV_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysRuning
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FactoryProcess
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoolProcess
</UL>

<P><STRONG><a name="[fa]"></a>PINS_DRV_ClearPins</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pins_driver.o(i.PINS_DRV_ClearPins))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_Init
</UL>

<P><STRONG><a name="[20a]"></a>PINS_DRV_ClearPortIntFlagCmd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pins_driver.o(i.PINS_DRV_ClearPortIntFlagCmd))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_IRQHandler
</UL>

<P><STRONG><a name="[207]"></a>PINS_DRV_Init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, pins_driver.o(i.PINS_DRV_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PINS_DRV_Init &rArr; PINS_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>

<P><STRONG><a name="[1cc]"></a>PINS_DRV_ReadPins</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pins_driver.o(i.PINS_DRV_ReadPins))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FactoryProcess
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YaSuoJiProcess
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadYaSuoJiData
</UL>

<P><STRONG><a name="[209]"></a>PINS_DRV_SetPinIntSel</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, pins_driver.o(i.PINS_DRV_SetPinIntSel))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PINS_DRV_SetPinIntSel
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_IRQHandler
</UL>

<P><STRONG><a name="[a1]"></a>PINS_DRV_WritePin</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, pins_driver.o(i.PINS_DRV_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PINS_DRV_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysRuning
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChouTiMotor
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxHeatProcess
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenYaSuoJi_1
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FactoryProcess
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerStart
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Process
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ForceOutput
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuoErIOProcess
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatProcess
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoolProcess
</UL>

<P><STRONG><a name="[208]"></a>PINS_Init</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, pins_port_hw_access.o(i.PINS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PINS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINS_DRV_Init
</UL>

<P><STRONG><a name="[41]"></a>PORT_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sys.o(i.PORT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PORT_IRQHandler &rArr; PINS_DRV_SetPinIntSel
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINS_DRV_SetPinIntSel
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINS_DRV_ClearPortIntFlagCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[20b]"></a>PORT_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sys.o(i.PORT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PORT_Init &rArr; PINS_DRV_Init &rArr; PINS_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_EnableIRQ
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINS_DRV_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[24a]"></a>PopEvent</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, clib.o(i.PopEvent))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysRuning
</UL>

<P><STRONG><a name="[195]"></a>PushEvent</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, clib.o(i.PushEvent))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCollect
</UL>

<P><STRONG><a name="[204]"></a>RDUART0_RcvByte</STRONG> (Thumb, 402 bytes, Stack size 8 bytes, bsp_uart.o(i.RDUART0_RcvByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RDUART0_RcvByte
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_RxTx_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>ReadBingXangState</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, bsp_eeprom.o(i.ReadBingXangState))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EEPROM_Initialize
</UL>

<P><STRONG><a name="[20c]"></a>ReadBusState_318</STRONG> (Thumb, 592 bytes, Stack size 32 bytes, updatacanmessage.o(i.ReadBusState_318))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ReadBusState_318 &rArr; BSP_EEPROM_Initialize &rArr; ReadTempEeprom &rArr; EEpromInit &rArr; WriteTempEeprom &rArr; __RTE_AppEepromWrite &rArr; __DiagTask_EEPWrite &rArr; CarSign_WriteToEep &rArr; EepApp_LoadWrtMsg &rArr; EepAll_LoadWrtMsg &rArr; EepAll_WrtMsg &rArr; EepAll_WrtMsgCopyToBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TxData
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RTE_AppRxPriodicMsg
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataCanMessage
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EEPROM_Initialize
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysRest
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPower
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysRuning
</UL>

<P><STRONG><a name="[a3]"></a>ReadTempEeprom</STRONG> (Thumb, 384 bytes, Stack size 8 bytes, bsp_eeprom.o(i.ReadTempEeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ReadTempEeprom &rArr; EEpromInit &rArr; WriteTempEeprom &rArr; __RTE_AppEepromWrite &rArr; __DiagTask_EEPWrite &rArr; CarSign_WriteToEep &rArr; EepApp_LoadWrtMsg &rArr; EepAll_LoadWrtMsg &rArr; EepAll_WrtMsg &rArr; EepAll_WrtMsgCopyToBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RTE_AppEepromRead
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEpromInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EEPROM_Initialize
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPower
</UL>

<P><STRONG><a name="[210]"></a>ReadYaSuoJiData</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, sysrun.o(i.ReadYaSuoJiData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadYaSuoJiData
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINS_DRV_ReadPins
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rest_YaSuoJiData
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YaSuoJiProcess
</UL>

<P><STRONG><a name="[211]"></a>Rest_YaSuoJiData</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, sysrun.o(i.Rest_YaSuoJiData))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YaSuoJiProcess
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadYaSuoJiData
</UL>

<P><STRONG><a name="[212]"></a>SYS_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sys.o(i.SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = SYS_Init &rArr; CLOCK_SYS_UpdateConfiguration &rArr; CLOCK_SYS_SetConfiguration &rArr; CLOCK_DRV_Init &rArr; CLOCK_SYS_SetScgConfiguration &rArr; CLOCK_SYS_ConfigureModulesFromScg &rArr; CLOCK_SYS_TransitionSystemClock &rArr; CLOCK_SYS_SetSystemClockConfig &rArr; CLOCK_SYS_GetSrcFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_DRV_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_UpdateConfiguration
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_Init
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[170]"></a>Seed2Key</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, seedkey.o(i.Seed2Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Seed2Key &rArr; AES_Cipher &rArr; MixColumns &rArr; FFmul
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_Cipher
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSub_Deal2702
</UL>

<P><STRONG><a name="[216]"></a>SendDataDiaplay</STRONG> (Thumb, 1742 bytes, Stack size 16 bytes, display.o(i.SendDataDiaplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SendDataDiaplay &rArr; LPUART_SetIntMode
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_SetIntMode
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Blink
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_Putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysRuning
</UL>

<P><STRONG><a name="[1d5]"></a>SetPause</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sysrun.o(i.SetPause))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuoErIOProcess
</UL>

<P><STRONG><a name="[1dc]"></a>SetValidJudgment</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, key.o(i.SetValidJudgment))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLongPressFunc
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemCompasationProcess
</UL>

<P><STRONG><a name="[21e]"></a>Stat_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stat.o(i.Stat_Init))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[1cd]"></a>SysRest</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, key.o(i.SysRest))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FactoryProcess
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBusState_318
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPower
</UL>

<P><STRONG><a name="[214]"></a>SysTick_Config</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, sys.o(i.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SysTick_Config &rArr; CLOCK_SYS_GetFreq &rArr; CLOCK_DRV_GetFreq &rArr; CLOCK_SYS_GetPccClockFreq &rArr; CLOCK_SYS_GetPeripheralClock &rArr; CLOCK_SYS_GetSysAsyncFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFreq
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[37]"></a>SysTick_Handler</STRONG> (Thumb, 1166 bytes, Stack size 8 bytes, sys.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SysTick_Handler &rArr; PINS_DRV_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINS_DRV_WritePin
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SystemInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, system_s32k116.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(.text)
</UL>
<P><STRONG><a name="[13b]"></a>SystemSoftwareReset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, system_s32k116.o(i.SystemSoftwareReset))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_StatTask
</UL>

<P><STRONG><a name="[228]"></a>TELProcess</STRONG> (Thumb, 1084 bytes, Stack size 24 bytes, telmessage.o(i.TELProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = TELProcess &rArr; KeyPower &rArr; ReadTempEeprom &rArr; EEpromInit &rArr; WriteTempEeprom &rArr; __RTE_AppEepromWrite &rArr; __DiagTask_EEPWrite &rArr; CarSign_WriteToEep &rArr; EepApp_LoadWrtMsg &rArr; EepAll_LoadWrtMsg &rArr; EepAll_WrtMsg &rArr; EepAll_WrtMsgCopyToBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RTE_SendAppMsg
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RTE_RcvTELMsgSt
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RTE_ClrRcvTELMsgSt
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_TCL_TEL_CanMessage
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDelayCnt
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPower
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysRuning
</UL>

<P><STRONG><a name="[22b]"></a>TemCompasationProcess</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, sysrun.o(i.TemCompasationProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TemCompasationProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetValidJudgment
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysRuning
</UL>

<P><STRONG><a name="[24d]"></a>TemperatureCollect</STRONG> (Thumb, 346 bytes, Stack size 0 bytes, bsp_adcollect.o(i.TemperatureCollect))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysRuning
</UL>

<P><STRONG><a name="[22c]"></a>Time_GetSysTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, time.o(i.Time_GetSysTick))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Out
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Reset
</UL>

<P><STRONG><a name="[21d]"></a>Time_Init</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, time.o(i.Time_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Time_Init &rArr; Time_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[188]"></a>Time_Out</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, time.o(i.Time_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Time_Out
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_GetSysTick
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMonitor
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepAll_DealWrtBuf
</UL>

<P><STRONG><a name="[187]"></a>Time_Reset</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, time.o(i.Time_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Time_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_GetSysTick
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepAll_DealWrtBuf
</UL>

<P><STRONG><a name="[24c]"></a>UartSingnalCollect</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sysrun.o(i.UartSingnalCollect))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysRuning
</UL>

<P><STRONG><a name="[20e]"></a>UpdataCanMessage</STRONG> (Thumb, 312 bytes, Stack size 0 bytes, updatacanmessage.o(i.UpdataCanMessage))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMonitor
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBusState_318
</UL>

<P><STRONG><a name="[bd]"></a>Updata_TCL_TEL_CanMessage</STRONG> (Thumb, 334 bytes, Stack size 12 bytes, updatacanmessage.o(i.Updata_TCL_TEL_CanMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Updata_TCL_TEL_CanMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TELProcess
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCProcess
</UL>

<P><STRONG><a name="[22d]"></a>WDOG_Config</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, wdog_hw_access.o(i.WDOG_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WDOG_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_EnableIRQGlobal
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_DisableIRQGlobal
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_IsUnlocked
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_IsReconfigurationComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_DRV_Init
</UL>

<P><STRONG><a name="[215]"></a>WDOG_DRV_Init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, wdog_driver.o(i.WDOG_DRV_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WDOG_DRV_Init &rArr; WDOG_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_EnableIRQ
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[15c]"></a>WDOG_DRV_Trigger</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, wdog_driver.o(i.WDOG_DRV_Trigger))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMonitor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMS
</UL>

<P><STRONG><a name="[185]"></a>WriteTempEeprom</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bsp_eeprom.o(i.WriteTempEeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = WriteTempEeprom &rArr; __RTE_AppEepromWrite &rArr; __DiagTask_EEPWrite &rArr; CarSign_WriteToEep &rArr; EepApp_LoadWrtMsg &rArr; EepAll_LoadWrtMsg &rArr; EepAll_WrtMsg &rArr; EepAll_WrtMsgCopyToBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RTE_AppEepromWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromProcess
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEpromInit
</UL>

<P><STRONG><a name="[24f]"></a>YaSuoJiErrowTimeCnt</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, sysrun.o(i.YaSuoJiErrowTimeCnt))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysRuning
</UL>

<P><STRONG><a name="[231]"></a>YaSuoJiProcess</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, sysrun.o(i.YaSuoJiProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = YaSuoJiProcess &rArr; ReadYaSuoJiData
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINS_DRV_ReadPins
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rest_YaSuoJiData
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadYaSuoJiData
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysRuning
</UL>

<P><STRONG><a name="[dd]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, flexcan_hw_access.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetOperationMode
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysRuning
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART_ClearStatusFlag
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FactoryProcess
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSimClockFreq
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSimClkOutFreq
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetScgClockFreq
</UL>

<P><STRONG><a name="[232]"></a>__DiagTask_5sAppMsg_Start</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, diagtask.o(i.__DiagTask_5sAppMsg_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __DiagTask_5sAppMsg_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_5sAppPeriodMsg_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RTE_5sAppMsgTriggerByLocalEvent_Start
</UL>

<P><STRONG><a name="[242]"></a>__DiagTask_Clr2FRcvFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, diagtask.o(i.__DiagTask_Clr2FRcvFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RTE_ClrRcv2FMsgSt
</UL>

<P><STRONG><a name="[243]"></a>__DiagTask_ClrRcvCDCFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, diagtask.o(i.__DiagTask_ClrRcvCDCFlag))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RTE_ClrRcvCDCMsgSt
</UL>

<P><STRONG><a name="[244]"></a>__DiagTask_ClrRcvTELFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, diagtask.o(i.__DiagTask_ClrRcvTELFlag))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RTE_ClrRcvTELMsgSt
</UL>

<P><STRONG><a name="[248]"></a>__DiagTask_DidVibDataSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, diagtask.o(i.__DiagTask_DidVibDataSet))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RTE_SetDidVIBData
</UL>

<P><STRONG><a name="[234]"></a>__DiagTask_EEPRead</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, diagtask.o(i.__DiagTask_EEPRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = __DiagTask_EEPRead &rArr; CarSign_ReadFromEep &rArr; EepApp_LoadRadMsg &rArr; EepAll_LoadRadMsg &rArr; EepAll_RadMsg &rArr; EEPROM_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSign_ReadFromEep
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RTE_AppEepromRead
</UL>

<P><STRONG><a name="[21a]"></a>__DiagTask_EEPTask</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, diagtask.o(i.__DiagTask_EEPTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __DiagTask_EEPTask &rArr; EepAll_DealWrtBuf &rArr; EEPROM_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepAll_DealWrtBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeTask
</UL>

<P><STRONG><a name="[235]"></a>__DiagTask_EEPWrite</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, diagtask.o(i.__DiagTask_EEPWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = __DiagTask_EEPWrite &rArr; CarSign_WriteToEep &rArr; EepApp_LoadWrtMsg &rArr; EepAll_LoadWrtMsg &rArr; EepAll_WrtMsg &rArr; EepAll_WrtMsgCopyToBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSign_WriteToEep
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RTE_AppEepromWrite
</UL>

<P><STRONG><a name="[221]"></a>__DiagTask_HandleTask</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, diagtask.o(i.__DiagTask_HandleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __DiagTask_HandleTask &rArr; CanTp_StatTask &rArr; CanTp_DealPhyTask &rArr; CanDiag_Dispatcher &rArr; CanDiag_NegResponse &rArr; CAN_SenMsg &rArr; FLEXCAN_TxData &rArr; FLEXCAN_UpdateMbInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm2_StatTask
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_TxTask
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_TxConfirm
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_DealRcvBuf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSign_StatTask
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_StatTask
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_StatTask
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_StatTask
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_TxStatTask
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_RxStatTask
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMonitor
</UL>

<P><STRONG><a name="[21c]"></a>__DiagTask_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, diagtask.o(i.__DiagTask_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = __DiagTask_Init &rArr; CanAll_Init &rArr; CanDiag_Init &rArr; CanDiag_FactoryModeCheck &rArr; DiagDid_ReadFromEep &rArr; CanDiag_ReadFromEep &rArr; EEPROM_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSign_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepAll_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[226]"></a>__DiagTask_Period100msTask</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, diagtask.o(i.__DiagTask_Period100msTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = __DiagTask_Period100msTask &rArr; CanDiag_TimeTask &rArr; CanDiag_Init &rArr; CanDiag_FactoryModeCheck &rArr; DiagDid_ReadFromEep &rArr; CanDiag_ReadFromEep &rArr; EEPROM_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_TimeTask
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMonitor
</UL>

<P><STRONG><a name="[224]"></a>__DiagTask_Period10msTask</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, diagtask.o(i.__DiagTask_Period10msTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __DiagTask_Period10msTask &rArr; Dtc_TimeTask &rArr; Dtc_UpdateDtcTask &rArr; Dtc_UpdateCtrlFlagTask &rArr; Dtc_ResetFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSign_TimeTask
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_TimeTask
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMonitor
</UL>

<P><STRONG><a name="[223]"></a>__DiagTask_Period2msTask</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, diagtask.o(i.__DiagTask_Period2msTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __DiagTask_Period2msTask &rArr; CanNm2_TimeTask &rArr; CanNm2_BusOffDeal &rArr; CanApp_TxEventCntSet
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanNm2_TimeTask
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_TimeTask
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_FactoryModeCTRL
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_TxTimeTask
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_RxTimeTask
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMonitor
</UL>

<P><STRONG><a name="[23f]"></a>__DiagTask_Rcv2FCheck</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, diagtask.o(i.__DiagTask_Rcv2FCheck))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RTE_2FModeOnSt
</UL>

<P><STRONG><a name="[245]"></a>__DiagTask_RcvCDCCheck</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, diagtask.o(i.__DiagTask_RcvCDCCheck))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RTE_RcvCDCMsgSt
</UL>

<P><STRONG><a name="[246]"></a>__DiagTask_RcvTELCheck</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, diagtask.o(i.__DiagTask_RcvTELCheck))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RTE_RcvTELMsgSt
</UL>

<P><STRONG><a name="[241]"></a>__DiagTask_RxPeriodMsg</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, diagtask.o(i.__DiagTask_RxPeriodMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __DiagTask_RxPeriodMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RTE_AppRxPriodicMsg
</UL>

<P><STRONG><a name="[247]"></a>__DiagTask_SendAppMsg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diagtask.o(i.__DiagTask_SendAppMsg))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RTE_SendAppMsg
</UL>

<P><STRONG><a name="[240]"></a>__DiagTask_SetPowerValue</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, diagtask.o(i.__DiagTask_SetPowerValue))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RTE_AppPWADCValue
</UL>

<P><STRONG><a name="[23c]"></a>__DiagTask_UpdateDTC</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, diagtask.o(i.__DiagTask_UpdateDTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __DiagTask_UpdateDTC &rArr; Dtc_UpdateDtcBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dtc_UpdateDtcBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RTE_UpdateDTC
</UL>

<P><STRONG><a name="[23d]"></a>__DiagTask_UpdatePriodicMsg</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, diagtask.o(i.__DiagTask_UpdatePriodicMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __DiagTask_UpdatePriodicMsg &rArr; CanAll_CopyDataToMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_CopyDataToMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RTE_AppFillPriodicMsg
</UL>

<P><STRONG><a name="[1d1]"></a>__RTE_2FModeOnSt</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, rte.o(i.__RTE_2FModeOnSt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __RTE_2FModeOnSt
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_Rcv2FCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceOutput
</UL>

<P><STRONG><a name="[1de]"></a>__RTE_5sAppMsgTriggerByLocalEvent_Start</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rte.o(i.__RTE_5sAppMsgTriggerByLocalEvent_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __RTE_5sAppMsgTriggerByLocalEvent_Start &rArr; __DiagTask_5sAppMsg_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_5sAppMsg_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess
</UL>

<P><STRONG><a name="[20f]"></a>__RTE_AppEepromRead</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rte.o(i.__RTE_AppEepromRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = __RTE_AppEepromRead &rArr; __DiagTask_EEPRead &rArr; CarSign_ReadFromEep &rArr; EepApp_LoadRadMsg &rArr; EepAll_LoadRadMsg &rArr; EepAll_RadMsg &rArr; EEPROM_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_EEPRead
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTempEeprom
</UL>

<P><STRONG><a name="[230]"></a>__RTE_AppEepromWrite</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rte.o(i.__RTE_AppEepromWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = __RTE_AppEepromWrite &rArr; __DiagTask_EEPWrite &rArr; CarSign_WriteToEep &rArr; EepApp_LoadWrtMsg &rArr; EepAll_LoadWrtMsg &rArr; EepAll_WrtMsg &rArr; EepAll_WrtMsgCopyToBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_EEPWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTempEeprom
</UL>

<P><STRONG><a name="[222]"></a>__RTE_AppFillPriodicMsg</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rte.o(i.__RTE_AppFillPriodicMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __RTE_AppFillPriodicMsg &rArr; __DiagTask_UpdatePriodicMsg &rArr; CanAll_CopyDataToMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_UpdatePriodicMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMonitor
</UL>

<P><STRONG><a name="[225]"></a>__RTE_AppPWADCValue</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rte.o(i.__RTE_AppPWADCValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __RTE_AppPWADCValue
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_SetPowerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMonitor
</UL>

<P><STRONG><a name="[20d]"></a>__RTE_AppRxPriodicMsg</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, rte.o(i.__RTE_AppRxPriodicMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __RTE_AppRxPriodicMsg &rArr; __DiagTask_RxPeriodMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_RxPeriodMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBusState_318
</UL>

<P><STRONG><a name="[1d2]"></a>__RTE_ClrRcv2FMsgSt</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rte.o(i.__RTE_ClrRcv2FMsgSt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __RTE_ClrRcv2FMsgSt
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_Clr2FRcvFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceOutput
</UL>

<P><STRONG><a name="[ba]"></a>__RTE_ClrRcvCDCMsgSt</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rte.o(i.__RTE_ClrRcvCDCMsgSt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __RTE_ClrRcvCDCMsgSt
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_ClrRcvCDCFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCProcess
</UL>

<P><STRONG><a name="[22a]"></a>__RTE_ClrRcvTELMsgSt</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rte.o(i.__RTE_ClrRcvTELMsgSt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __RTE_ClrRcvTELMsgSt
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_ClrRcvTELFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TELProcess
</UL>

<P><STRONG><a name="[b9]"></a>__RTE_RcvCDCMsgSt</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rte.o(i.__RTE_RcvCDCMsgSt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __RTE_RcvCDCMsgSt
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_RcvCDCCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCProcess
</UL>

<P><STRONG><a name="[229]"></a>__RTE_RcvTELMsgSt</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rte.o(i.__RTE_RcvTELMsgSt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __RTE_RcvTELMsgSt
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_RcvTELCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TELProcess
</UL>

<P><STRONG><a name="[be]"></a>__RTE_SendAppMsg</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rte.o(i.__RTE_SendAppMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __RTE_SendAppMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_SendAppMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TELProcess
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCProcess
</UL>

<P><STRONG><a name="[b1]"></a>__RTE_SetDidVIBData</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rte.o(i.__RTE_SetDidVIBData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __RTE_SetDidVIBData
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_DidVibDataSet
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_22_2E_FillData
</UL>

<P><STRONG><a name="[15a]"></a>__RTE_UpdateDTC</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, rte.o(i.__RTE_UpdateDTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __RTE_UpdateDTC &rArr; __DiagTask_UpdateDTC &rArr; Dtc_UpdateDtcBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_UpdateDTC
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTCDataCollect
</UL>

<P><STRONG><a name="[8b]"></a>adc_get_average</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, bsp_adcollect.o(i.adc_get_average))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adc_get_average
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCollectProcess
</UL>

<P><STRONG><a name="[b]"></a>init_data_bss</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, startup.o(i.init_data_bss))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = init_data_bss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_s32k116.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>main</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = main &rArr; SysInit &rArr; SYS_Init &rArr; CLOCK_SYS_UpdateConfiguration &rArr; CLOCK_SYS_SetConfiguration &rArr; CLOCK_DRV_Init &rArr; CLOCK_SYS_SetScgConfiguration &rArr; CLOCK_SYS_ConfigureModulesFromScg &rArr; CLOCK_SYS_TransitionSystemClock &rArr; CLOCK_SYS_SetSystemClockConfig &rArr; CLOCK_SYS_GetSrcFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysRuning
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_DRV_Trigger
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTask
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeTask
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[249]"></a>sysRuning</STRONG> (Thumb, 400 bytes, Stack size 16 bytes, sysrun.o(i.sysRuning))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = sysRuning &rArr; ReadBusState_318 &rArr; BSP_EEPROM_Initialize &rArr; ReadTempEeprom &rArr; EEpromInit &rArr; WriteTempEeprom &rArr; __RTE_AppEepromWrite &rArr; __DiagTask_EEPWrite &rArr; CarSign_WriteToEep &rArr; EepApp_LoadWrtMsg &rArr; EepAll_LoadWrtMsg &rArr; EepAll_WrtMsg &rArr; EepAll_WrtMsgCopyToBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINS_DRV_WritePin
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChouTiMotor
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxHeatProcess
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenYaSuoJi_1
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FactoryProcess
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataDiaplay
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBusState_318
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TELProcess
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCProcess
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyEnterFactory
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopEvent
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCollect
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerProcess
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Process
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromProcess
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemperatureCollect
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCollectProcess
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YaSuoJiProcess
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YaSuoJiErrowTimeCnt
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSingnalCollect
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemCompasationProcess
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuoErIOProcess
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatProcess
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeatPWM_ioProcess
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceOutput
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTCDataCollect
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoolProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, dlef.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_22_2E_FillData
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FactoryProcess
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerStart
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADPowerColect
</UL>

<P><STRONG><a name="[250]"></a>_dcmple</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dlef.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FactoryProcess
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADPowerColect
</UL>

<P><STRONG><a name="[251]"></a>_drcmple</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[290]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)

<P><STRONG><a name="[252]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, feqf.o(x$fpl$feqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_22_2E_FillData
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerStart
</UL>

<P><STRONG><a name="[254]"></a>_fcmpeq</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, flef.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_22_2E_FillData
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FactoryProcess
</UL>

<P><STRONG><a name="[255]"></a>_fcmple</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, flef.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, frlef.o(x$fpl$frleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_22_2E_FillData
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FactoryProcess
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADPowerColect
</UL>

<P><STRONG><a name="[256]"></a>_frcmple</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, frlef.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADDoorCollect
</UL>

<P><STRONG><a name="[257]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[219]"></a>SpeTask</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.SpeTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SpeTask &rArr; __DiagTask_EEPTask &rArr; EepAll_DealWrtBuf &rArr; EEPROM_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_EEPTask
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21b]"></a>SysInit</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, main.o(i.SysInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SysInit &rArr; SYS_Init &rArr; CLOCK_SYS_UpdateConfiguration &rArr; CLOCK_SYS_SetConfiguration &rArr; CLOCK_DRV_Init &rArr; CLOCK_SYS_SetScgConfiguration &rArr; CLOCK_SYS_ConfigureModulesFromScg &rArr; CLOCK_SYS_TransitionSystemClock &rArr; CLOCK_SYS_SetSystemClockConfig &rArr; CLOCK_SYS_GetSrcFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_Init
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stat_Init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_EnableIRQGlobal
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_DisableIRQGlobal
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flag_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UART_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EEPROM_Initialize
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[220]"></a>SysMonitor</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, main.o(i.SysMonitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = SysMonitor &rArr; __DiagTask_Period100msTask &rArr; CanDiag_TimeTask &rArr; CanDiag_Init &rArr; CanDiag_FactoryModeCheck &rArr; DiagDid_ReadFromEep &rArr; CanDiag_ReadFromEep &rArr; EEPROM_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RTE_AppPWADCValue
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RTE_AppFillPriodicMsg
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_Period2msTask
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_Period10msTask
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_Period100msTask
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DiagTask_HandleTask
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_DRV_Trigger
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataCanMessage
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Out
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_22_2E_FillData
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetADC0Task
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTask
</UL>

<P><STRONG><a name="[227]"></a>SysTask</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, main.o(i.SysTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = SysTask &rArr; SysMonitor &rArr; __DiagTask_Period100msTask &rArr; CanDiag_TimeTask &rArr; CanDiag_Init &rArr; CanDiag_FactoryModeCheck &rArr; DiagDid_ReadFromEep &rArr; CanDiag_ReadFromEep &rArr; EEPROM_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMonitor
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[196]"></a>FLEXCAN_IsEnabled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, flexcan.o(i.FLEXCAN_IsEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN0_InitReg
</UL>

<P><STRONG><a name="[19f]"></a>FLEXCAN_MbCfgForRx</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, flexcan.o(i.FLEXCAN_MbCfgForRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FLEXCAN_MbCfgForRx &rArr; FLEXCAN_UpdateMbInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_ExitFreezeMode
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_EnterFreezeMode
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_UpdateMbInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN0_InitReg
</UL>

<P><STRONG><a name="[19e]"></a>FLEXCAN_MbCfgForTx</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, flexcan.o(i.FLEXCAN_MbCfgForTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLEXCAN_MbCfgForTx &rArr; FLEXCAN_UpdateMbInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_UpdateMbInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN0_InitReg
</UL>

<P><STRONG><a name="[aa]"></a>FLEXCAN_MbLock</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, flexcan.o(i.FLEXCAN_MbLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXCAN_MbLock
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_ORed_0_31_MB_IRQHandler
</UL>

<P><STRONG><a name="[ad]"></a>FLEXCAN_MbUnLock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flexcan.o(i.FLEXCAN_MbUnLock))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_ORed_0_31_MB_IRQHandler
</UL>

<P><STRONG><a name="[ab]"></a>FLEXCAN_UpdateMbInfo</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, flexcan.o(i.FLEXCAN_UpdateMbInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXCAN_UpdateMbInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_ORed_0_31_MB_IRQHandler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_MbCfgForTx
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_MbCfgForRx
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_TxData
</UL>

<P><STRONG><a name="[1a1]"></a>FLEXCAN_ClearRAM</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, flexcan_hw_access.o(i.FLEXCAN_ClearRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLEXCAN_ClearRAM &rArr; FLEXCAN_GetMaxMbNum
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetMaxMbNum
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_Init
</UL>

<P><STRONG><a name="[1a5]"></a>FLEXCAN_IsFDEnabled</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, flexcan_hw_access.o(i.FLEXCAN_IsFDEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_SetPayloadSize
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCAN_GetPayloadSize
</UL>

<P><STRONG><a name="[203]"></a>LPUART_Putchar</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpuart.o(i.LPUART_Putchar))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_RxTx_IRQHandler
</UL>

<P><STRONG><a name="[1ff]"></a>LPUART_SetReceiverCmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lpuart.o(i.LPUART_SetReceiverCmd))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_InitReg
</UL>

<P><STRONG><a name="[1fe]"></a>LPUART_SetTransmitterCmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lpuart.o(i.LPUART_SetTransmitterCmd))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART0_InitReg
</UL>

<P><STRONG><a name="[183]"></a>EEPROM_CmdSequence</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, eeprom.o(.code_ram))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EEPROM_CmdSequence
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_EnableIRQGlobal (via Veneer)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_SYS_DisableIRQGlobal (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_SetFlexRam (via Veneer)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ProgPartition (via Veneer)
</UL>

<P><STRONG><a name="[181]"></a>EEPROM_ProgPartition</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, eeprom.o(i.EEPROM_ProgPartition))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EEPROM_ProgPartition &rArr; EEPROM_CmdSequence
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_CmdSequence (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Init
</UL>

<P><STRONG><a name="[182]"></a>EEPROM_SetFlexRam</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, eeprom.o(i.EEPROM_SetFlexRam))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EEPROM_SetFlexRam &rArr; EEPROM_CmdSequence
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_CmdSequence (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Init
</UL>

<P><STRONG><a name="[217]"></a>LPUART_Putchar</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, display.o(i.LPUART_Putchar))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataDiaplay
</UL>

<P><STRONG><a name="[7d]"></a>ADC_SetClockDivide</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, adc_driver.o(i.ADC_SetClockDivide))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_SetClockDivide
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_ConfigConverter
</UL>

<P><STRONG><a name="[84]"></a>ADC_SetHwAverageEnableFlag</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, adc_driver.o(i.ADC_SetHwAverageEnableFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_SetHwAverageEnableFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_ConfigHwAverage
</UL>

<P><STRONG><a name="[85]"></a>ADC_SetHwAverageMode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, adc_driver.o(i.ADC_SetHwAverageMode))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_ConfigHwAverage
</UL>

<P><STRONG><a name="[79]"></a>ADC_SetInputChannel</STRONG> (Thumb, 106 bytes, Stack size 44 bytes, adc_driver.o(i.ADC_SetInputChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ADC_SetInputChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_ConfigChan
</UL>

<P><STRONG><a name="[80]"></a>ADC_SetPretriggerSelect</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, adc_driver.o(i.ADC_SetPretriggerSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_SetPretriggerSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_ConfigConverter
</UL>

<P><STRONG><a name="[7e]"></a>ADC_SetSampleTime</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, adc_driver.o(i.ADC_SetSampleTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_SetSampleTime
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_ConfigConverter
</UL>

<P><STRONG><a name="[82]"></a>ADC_SetSupplyMonitoringEnableFlag</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, adc_driver.o(i.ADC_SetSupplyMonitoringEnableFlag))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_ConfigConverter
</UL>

<P><STRONG><a name="[7f]"></a>ADC_SetTriggerMode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, adc_driver.o(i.ADC_SetTriggerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_SetTriggerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_ConfigConverter
</UL>

<P><STRONG><a name="[81]"></a>ADC_SetTriggerSelect</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, adc_driver.o(i.ADC_SetTriggerSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_SetTriggerSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_ConfigConverter
</UL>

<P><STRONG><a name="[c9]"></a>CLOCK_SYS_CheckPCCClock</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, clock_s32k1xx.o(i.CLOCK_SYS_CheckPCCClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLOCK_SYS_CheckPCCClock &rArr; PCC_GetClockMode
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCC_GetClockMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetPccClockFreq
</UL>

<P><STRONG><a name="[cb]"></a>CLOCK_SYS_ConfigureFIRC</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, clock_s32k1xx.o(i.CLOCK_SYS_ConfigureFIRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLOCK_SYS_ConfigureFIRC
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFircFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_ConfigureTemporarySystemClock
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_ConfigureModulesFromScg
</UL>

<P><STRONG><a name="[cd]"></a>CLOCK_SYS_ConfigureModulesFromScg</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, clock_s32k1xx.o(i.CLOCK_SYS_ConfigureModulesFromScg))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CLOCK_SYS_ConfigureModulesFromScg &rArr; CLOCK_SYS_TransitionSystemClock &rArr; CLOCK_SYS_SetSystemClockConfig &rArr; CLOCK_SYS_GetSrcFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_TransitionSystemClock
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetCurrentRunMode
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_ConfigureSOSC
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_ConfigureSIRC
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_ConfigureFIRC
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetScgConfiguration
</UL>

<P><STRONG><a name="[ce]"></a>CLOCK_SYS_ConfigureSIRC</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, clock_s32k1xx.o(i.CLOCK_SYS_ConfigureSIRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLOCK_SYS_ConfigureSIRC
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSircFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_ConfigureModulesFromScg
</UL>

<P><STRONG><a name="[cf]"></a>CLOCK_SYS_ConfigureSOSC</STRONG> (Thumb, 292 bytes, Stack size 56 bytes, clock_s32k1xx.o(i.CLOCK_SYS_ConfigureSOSC))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CLOCK_SYS_ConfigureSOSC &rArr; SCG_SetSoscControl
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCG_SetSoscControl
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSysOscFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_ConfigureModulesFromScg
</UL>

<P><STRONG><a name="[d5]"></a>CLOCK_SYS_ConfigureTemporarySystemClock</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, clock_s32k1xx.o(i.CLOCK_SYS_ConfigureTemporarySystemClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CLOCK_SYS_ConfigureTemporarySystemClock &rArr; CLOCK_SYS_TransitionSystemClock &rArr; CLOCK_SYS_SetSystemClockConfig &rArr; CLOCK_SYS_GetSrcFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCG_GetCurrentSystemClockSource
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_TransitionSystemClock
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFircFreq
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_ConfigureFIRC
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetScgConfiguration
</UL>

<P><STRONG><a name="[d0]"></a>CLOCK_SYS_GetCurrentRunMode</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, clock_s32k1xx.o(i.CLOCK_SYS_GetCurrentRunMode))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_TransitionSystemClock
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_ConfigureModulesFromScg
</UL>

<P><STRONG><a name="[c4]"></a>CLOCK_SYS_GetDefaultConfiguration</STRONG> (Thumb, 320 bytes, Stack size 0 bytes, clock_s32k1xx.o(i.CLOCK_SYS_GetDefaultConfiguration))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DRV_Init
</UL>

<P><STRONG><a name="[cc]"></a>CLOCK_SYS_GetFircFreq</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, clock_s32k1xx.o(i.CLOCK_SYS_GetFircFreq))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSystemClockFreq
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSysAsyncFreq
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSrcFreq
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetScgClockFreq
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetScgClkOutFreq
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_ConfigureTemporarySystemClock
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_ConfigureFIRC
</UL>

<P><STRONG><a name="[d7]"></a>CLOCK_SYS_GetLpoFreq</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, clock_s32k1xx.o(i.CLOCK_SYS_GetLpoFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_SYS_GetLpoFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_GetLpo32KStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSimClockFreq
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSimClkOutFreq
</UL>

<P><STRONG><a name="[c2]"></a>CLOCK_SYS_GetPccClockFreq</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, clock_s32k1xx.o(i.CLOCK_SYS_GetPccClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CLOCK_SYS_GetPccClockFreq &rArr; CLOCK_SYS_GetPeripheralClock &rArr; CLOCK_SYS_GetSysAsyncFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSystemClockFreq
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetPeripheralClock
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_CheckPCCClock
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DRV_GetFreq
</UL>

<P><STRONG><a name="[da]"></a>CLOCK_SYS_GetPeripheralClock</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, clock_s32k1xx.o(i.CLOCK_SYS_GetPeripheralClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLOCK_SYS_GetPeripheralClock &rArr; CLOCK_SYS_GetSysAsyncFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCC_GetClockMode
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSysAsyncFreq
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetPccClockFreq
</UL>

<P><STRONG><a name="[dc]"></a>CLOCK_SYS_GetScgClkOutFreq</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, clock_s32k1xx.o(i.CLOCK_SYS_GetScgClkOutFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLOCK_SYS_GetScgClkOutFreq &rArr; CLOCK_SYS_GetSystemClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSystemClockFreq
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSysOscFreq
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSircFreq
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFircFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSimClkOutFreq
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetScgClockFreq
</UL>

<P><STRONG><a name="[c0]"></a>CLOCK_SYS_GetScgClockFreq</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, clock_s32k1xx.o(i.CLOCK_SYS_GetScgClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CLOCK_SYS_GetScgClockFreq &rArr; CLOCK_SYS_GetSimClkOutFreq &rArr; CLOCK_SYS_GetSimRtcClkFreq &rArr; CLOCK_SYS_GetSysAsyncFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSystemClockFreq
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSysOscFreq
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSysAsyncFreq
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSircFreq
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSimClkOutFreq
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetScgClkOutFreq
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFircFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DRV_GetFreq
</UL>

<P><STRONG><a name="[de]"></a>CLOCK_SYS_GetSimClkOutFreq</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, clock_s32k1xx.o(i.CLOCK_SYS_GetSimClkOutFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLOCK_SYS_GetSimClkOutFreq &rArr; CLOCK_SYS_GetSimRtcClkFreq &rArr; CLOCK_SYS_GetSysAsyncFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSystemClockFreq
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSysAsyncFreq
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSimRtcClkFreq
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetScgClkOutFreq
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetLpoFreq
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSimClockFreq
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetScgClockFreq
</UL>

<P><STRONG><a name="[c1]"></a>CLOCK_SYS_GetSimClockFreq</STRONG> (Thumb, 398 bytes, Stack size 24 bytes, clock_s32k1xx.o(i.CLOCK_SYS_GetSimClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CLOCK_SYS_GetSimClockFreq &rArr; CLOCK_SYS_GetSimClkOutFreq &rArr; CLOCK_SYS_GetSimRtcClkFreq &rArr; CLOCK_SYS_GetSysAsyncFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_GetLpo32KStatus
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMC_GetLpoMode
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSimRtcClkFreq
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSimClkOutFreq
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetLpoFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DRV_GetFreq
</UL>

<P><STRONG><a name="[df]"></a>CLOCK_SYS_GetSimRtcClkFreq</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, clock_s32k1xx.o(i.CLOCK_SYS_GetSimRtcClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLOCK_SYS_GetSimRtcClkFreq &rArr; CLOCK_SYS_GetSysAsyncFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_GetLpo32KStatus
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSysAsyncFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSimClockFreq
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSimClkOutFreq
</UL>

<P><STRONG><a name="[d2]"></a>CLOCK_SYS_GetSircFreq</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, clock_s32k1xx.o(i.CLOCK_SYS_GetSircFreq))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSystemClockFreq
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSysAsyncFreq
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSrcFreq
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetScgClockFreq
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetScgClkOutFreq
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_ConfigureSIRC
</UL>

<P><STRONG><a name="[e1]"></a>CLOCK_SYS_GetSrcFreq</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, clock_s32k1xx.o(i.CLOCK_SYS_GetSrcFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_SYS_GetSrcFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSysOscFreq
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSircFreq
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFircFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetSystemClockConfig
</UL>

<P><STRONG><a name="[db]"></a>CLOCK_SYS_GetSysAsyncFreq</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, clock_s32k1xx.o(i.CLOCK_SYS_GetSysAsyncFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_SYS_GetSysAsyncFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSysOscFreq
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSircFreq
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFircFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSimRtcClkFreq
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSimClkOutFreq
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetScgClockFreq
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetPeripheralClock
</UL>

<P><STRONG><a name="[d4]"></a>CLOCK_SYS_GetSysOscFreq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, clock_s32k1xx.o(i.CLOCK_SYS_GetSysOscFreq))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSystemClockFreq
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSysAsyncFreq
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSrcFreq
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetScgClockFreq
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetScgClkOutFreq
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_ConfigureSOSC
</UL>

<P><STRONG><a name="[d9]"></a>CLOCK_SYS_GetSystemClockFreq</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, clock_s32k1xx.o(i.CLOCK_SYS_GetSystemClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_SYS_GetSystemClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCG_GetCurrentSystemClockSource
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCG_GetCurrentCoreClockDividerRatio
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCG_GetCurrentBusClockDividerRatio
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSysOscFreq
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSircFreq
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetFircFreq
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSimClkOutFreq
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetScgClockFreq
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetScgClkOutFreq
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetPccClockFreq
</UL>

<P><STRONG><a name="[c6]"></a>CLOCK_SYS_SetPccConfiguration</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, clock_s32k1xx.o(i.CLOCK_SYS_SetPccConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLOCK_SYS_SetPccConfiguration &rArr; PCC_SetPeripheralClockControl
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCC_SetPeripheralClockControl
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCC_SetClockMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DRV_Init
</UL>

<P><STRONG><a name="[c8]"></a>CLOCK_SYS_SetPmcConfiguration</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, clock_s32k1xx.o(i.CLOCK_SYS_SetPmcConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLOCK_SYS_SetPmcConfiguration &rArr; PMC_SetLpoMode
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMC_SetLpoMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DRV_Init
</UL>

<P><STRONG><a name="[c5]"></a>CLOCK_SYS_SetScgConfiguration</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, clock_s32k1xx.o(i.CLOCK_SYS_SetScgConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CLOCK_SYS_SetScgConfiguration &rArr; CLOCK_SYS_ConfigureModulesFromScg &rArr; CLOCK_SYS_TransitionSystemClock &rArr; CLOCK_SYS_SetSystemClockConfig &rArr; CLOCK_SYS_GetSrcFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetSystemClockConfig
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_ConfigureTemporarySystemClock
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_ConfigureModulesFromScg
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DRV_Init
</UL>

<P><STRONG><a name="[c7]"></a>CLOCK_SYS_SetSimConfiguration</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, clock_s32k1xx.o(i.CLOCK_SYS_SetSimConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLOCK_SYS_SetSimConfiguration &rArr; SIM_SetLpoClocks
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_SetTraceClockConfig
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_SetMscmClockGate
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_SetMpuClockGate
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_SetLpoClocks
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_SetErmClockGate
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_SetEimClockGate
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM_SetDmaClockGate
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DRV_Init
</UL>

<P><STRONG><a name="[e8]"></a>CLOCK_SYS_SetSystemClockConfig</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, clock_s32k1xx.o(i.CLOCK_SYS_SetSystemClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CLOCK_SYS_SetSystemClockConfig &rArr; CLOCK_SYS_GetSrcFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSrcFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_TransitionSystemClock
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetScgConfiguration
</UL>

<P><STRONG><a name="[d1]"></a>CLOCK_SYS_TransitionSystemClock</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, clock_s32k1xx.o(i.CLOCK_SYS_TransitionSystemClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CLOCK_SYS_TransitionSystemClock &rArr; CLOCK_SYS_SetSystemClockConfig &rArr; CLOCK_SYS_GetSrcFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCG_GetCurrentSystemClockSource
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetSystemClockConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetCurrentRunMode
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_ConfigureTemporarySystemClock
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_ConfigureModulesFromScg
</UL>

<P><STRONG><a name="[ca]"></a>PCC_GetClockMode</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, clock_s32k1xx.o(i.PCC_GetClockMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PCC_GetClockMode
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetPeripheralClock
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_CheckPCCClock
</UL>

<P><STRONG><a name="[e5]"></a>PCC_SetClockMode</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, clock_s32k1xx.o(i.PCC_SetClockMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PCC_SetClockMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetPccConfiguration
</UL>

<P><STRONG><a name="[e6]"></a>PCC_SetPeripheralClockControl</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, clock_s32k1xx.o(i.PCC_SetPeripheralClockControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PCC_SetPeripheralClockControl
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetPccConfiguration
</UL>

<P><STRONG><a name="[e0]"></a>PMC_GetLpoMode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, clock_s32k1xx.o(i.PMC_GetLpoMode))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSimClockFreq
</UL>

<P><STRONG><a name="[e7]"></a>PMC_SetLpoMode</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, clock_s32k1xx.o(i.PMC_SetLpoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PMC_SetLpoMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetPmcConfiguration
</UL>

<P><STRONG><a name="[e3]"></a>SCG_GetCurrentBusClockDividerRatio</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clock_s32k1xx.o(i.SCG_GetCurrentBusClockDividerRatio))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSystemClockFreq
</UL>

<P><STRONG><a name="[e2]"></a>SCG_GetCurrentCoreClockDividerRatio</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, clock_s32k1xx.o(i.SCG_GetCurrentCoreClockDividerRatio))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSystemClockFreq
</UL>

<P><STRONG><a name="[d6]"></a>SCG_GetCurrentSystemClockSource</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, clock_s32k1xx.o(i.SCG_GetCurrentSystemClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_TransitionSystemClock
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSystemClockFreq
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_ConfigureTemporarySystemClock
</UL>

<P><STRONG><a name="[d3]"></a>SCG_SetSoscControl</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, clock_s32k1xx.o(i.SCG_SetSoscControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SCG_SetSoscControl
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_ConfigureSOSC
</UL>

<P><STRONG><a name="[d8]"></a>SIM_GetLpo32KStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clock_s32k1xx.o(i.SIM_GetLpo32KStatus))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSimRtcClkFreq
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetSimClockFreq
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_GetLpoFreq
</UL>

<P><STRONG><a name="[ec]"></a>SIM_SetDmaClockGate</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, clock_s32k1xx.o(i.SIM_SetDmaClockGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SIM_SetDmaClockGate
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetSimConfiguration
</UL>

<P><STRONG><a name="[ee]"></a>SIM_SetEimClockGate</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, clock_s32k1xx.o(i.SIM_SetEimClockGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SIM_SetEimClockGate
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetSimConfiguration
</UL>

<P><STRONG><a name="[ed]"></a>SIM_SetErmClockGate</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, clock_s32k1xx.o(i.SIM_SetErmClockGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SIM_SetErmClockGate
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetSimConfiguration
</UL>

<P><STRONG><a name="[e9]"></a>SIM_SetLpoClocks</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, clock_s32k1xx.o(i.SIM_SetLpoClocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SIM_SetLpoClocks
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetSimConfiguration
</UL>

<P><STRONG><a name="[eb]"></a>SIM_SetMpuClockGate</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, clock_s32k1xx.o(i.SIM_SetMpuClockGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SIM_SetMpuClockGate
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetSimConfiguration
</UL>

<P><STRONG><a name="[ea]"></a>SIM_SetMscmClockGate</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, clock_s32k1xx.o(i.SIM_SetMscmClockGate))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetSimConfiguration
</UL>

<P><STRONG><a name="[ef]"></a>SIM_SetTraceClockConfig</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, clock_s32k1xx.o(i.SIM_SetTraceClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SIM_SetTraceClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SYS_SetSimConfiguration
</UL>

<P><STRONG><a name="[22f]"></a>WDOG_IsReconfigurationComplete</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wdog_hw_access.o(i.WDOG_IsReconfigurationComplete))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_Config
</UL>

<P><STRONG><a name="[22e]"></a>WDOG_IsUnlocked</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wdog_hw_access.o(i.WDOG_IsUnlocked))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDOG_Config
</UL>

<P><STRONG><a name="[1ed]"></a>LPSPI_DRV_MasterCompleteTransfer</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, lpspi_master_driver.o(i.LPSPI_DRV_MasterCompleteTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPSPI_DRV_MasterCompleteTransfer &rArr; LPSPI_DRV_DisableTEIEInterrupts &rArr; LPSPI_SetIntMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_ClearStatusFlag
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_SemaPost
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_DisableTEIEInterrupts
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SetTxDmaCmd
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SetRxDmaCmd
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_SetIntMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_MasterIRQHandler
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_MasterAbortTransfer
</UL>

<P><STRONG><a name="[1f3]"></a>LPSPI_GetStatusFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lpspi_master_driver.o(i.LPSPI_GetStatusFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_MasterIRQHandler
</UL>

<P><STRONG><a name="[1f1]"></a>LPSPI_SetIntMode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lpspi_master_driver.o(i.LPSPI_SetIntMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPSPI_SetIntMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_MasterIRQHandler
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_MasterCompleteTransfer
</UL>

<P><STRONG><a name="[1ef]"></a>LPSPI_SetRxDmaCmd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpspi_master_driver.o(i.LPSPI_SetRxDmaCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_MasterCompleteTransfer
</UL>

<P><STRONG><a name="[1f0]"></a>LPSPI_SetTxDmaCmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lpspi_master_driver.o(i.LPSPI_SetTxDmaCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_MasterCompleteTransfer
</UL>

<P><STRONG><a name="[1e6]"></a>LPSPI_SetIntMode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lpspi_shared_function.o(i.LPSPI_SetIntMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPSPI_SetIntMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_DisableTEIEInterrupts
</UL>

<P><STRONG><a name="[1f9]"></a>LPSPI_GetStatusFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lpspi_slave_driver.o(i.LPSPI_GetStatusFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_SlaveIRQHandler
</UL>

<P><STRONG><a name="[1f6]"></a>LPSPI_SetIntMode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lpspi_slave_driver.o(i.LPSPI_SetIntMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPSPI_SetIntMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_SlaveAbortTransfer
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_SlaveIRQHandler
</UL>

<P><STRONG><a name="[1f7]"></a>LPSPI_SetRxDmaCmd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpspi_slave_driver.o(i.LPSPI_SetRxDmaCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_SlaveAbortTransfer
</UL>

<P><STRONG><a name="[1f8]"></a>LPSPI_SetTxDmaCmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lpspi_slave_driver.o(i.LPSPI_SetTxDmaCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPSPI_DRV_SlaveAbortTransfer
</UL>

<P><STRONG><a name="[17f]"></a>EDMA_DRV_ClearIntStatus</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, edma_driver.o(i.EDMA_DRV_ClearIntStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EDMA_DRV_ClearIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_IRQHandler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_DRV_ErrorIRQHandler
</UL>

<P><STRONG><a name="[1c8]"></a>FTM_DRV_SetHardwareSyncTriggerSrc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ftm_common.o(i.FTM_DRV_SetHardwareSyncTriggerSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FTM_DRV_SetHardwareSyncTriggerSrc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_SetSync
</UL>

<P><STRONG><a name="[1b1]"></a>FTM_DRV_SetTimerOverflowInt</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ftm_common.o(i.FTM_DRV_SetTimerOverflowInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FTM_DRV_SetTimerOverflowInt
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_Init
</UL>

<P><STRONG><a name="[1c0]"></a>FTM_DRV_EnablePwmChannelOutputs</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ftm_pwm_driver.o(i.FTM_DRV_EnablePwmChannelOutputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FTM_DRV_EnablePwmChannelOutputs
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwmIndependentChannel
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwmCombinedChannel
</UL>

<P><STRONG><a name="[1b4]"></a>FTM_DRV_InitPwmCombinedChannel</STRONG> (Thumb, 418 bytes, Stack size 32 bytes, ftm_pwm_driver.o(i.FTM_DRV_InitPwmCombinedChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FTM_DRV_InitPwmCombinedChannel &rArr; FTM_DRV_SetDualEdgeCaptureCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_SetDualEdgeCaptureCmd
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_SetDualChnPwmSyncCmd
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_SetDualChnMofCombineCmd
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_SetDualChnFaultCmd
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_SetDualChnDeadtimeCmd
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_SetDualChnCompCmd
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_SetDualChnCombineCmd
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_SetChnOutputPolarityCmd
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_SetChnMSnBAMode
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_SetChnEdgeLevel
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_EnablePwmChannelOutputs
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_SetChnTriggerCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwm
</UL>

<P><STRONG><a name="[1b9]"></a>FTM_DRV_InitPwmDutyCycleChannel</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, ftm_pwm_driver.o(i.FTM_DRV_InitPwmDutyCycleChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = FTM_DRV_InitPwmDutyCycleChannel &rArr; FTM_DRV_UpdatePwmChannel &rArr; FTM_DRV_SetSoftwareTriggerCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_UpdatePwmChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwm
</UL>

<P><STRONG><a name="[1b3]"></a>FTM_DRV_InitPwmIndependentChannel</STRONG> (Thumb, 402 bytes, Stack size 32 bytes, ftm_pwm_driver.o(i.FTM_DRV_InitPwmIndependentChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FTM_DRV_InitPwmIndependentChannel &rArr; FTM_DRV_SetDualEdgeCaptureCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_SetDualEdgeCaptureCmd
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_SetDualChnPwmSyncCmd
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_SetDualChnMofCombineCmd
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_SetDualChnFaultCmd
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_SetDualChnDeadtimeCmd
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_SetDualChnCompCmd
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_SetDualChnCombineCmd
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_SetChnOutputPolarityCmd
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_SetChnMSnBAMode
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_SetChnEdgeLevel
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_EnablePwmChannelOutputs
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_SetChnTriggerCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwm
</UL>

<P><STRONG><a name="[1c9]"></a>FTM_DRV_SetChnCountVal</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ftm_pwm_driver.o(i.FTM_DRV_SetChnCountVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FTM_DRV_SetChnCountVal
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_UpdatePwmChannel
</UL>

<P><STRONG><a name="[1bd]"></a>FTM_DRV_SetChnEdgeLevel</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, ftm_pwm_driver.o(i.FTM_DRV_SetChnEdgeLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FTM_DRV_SetChnEdgeLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwmIndependentChannel
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwmCombinedChannel
</UL>

<P><STRONG><a name="[1bf]"></a>FTM_DRV_SetChnMSnBAMode</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, ftm_pwm_driver.o(i.FTM_DRV_SetChnMSnBAMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FTM_DRV_SetChnMSnBAMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwmIndependentChannel
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwmCombinedChannel
</UL>

<P><STRONG><a name="[1bc]"></a>FTM_DRV_SetChnOutputPolarityCmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ftm_pwm_driver.o(i.FTM_DRV_SetChnOutputPolarityCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FTM_DRV_SetChnOutputPolarityCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwmIndependentChannel
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwmCombinedChannel
</UL>

<P><STRONG><a name="[1b2]"></a>FTM_DRV_SetClockSource</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ftm_pwm_driver.o(i.FTM_DRV_SetClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FTM_DRV_SetClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwm
</UL>

<P><STRONG><a name="[1b7]"></a>FTM_DRV_SetCpwms</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ftm_pwm_driver.o(i.FTM_DRV_SetCpwms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FTM_DRV_SetCpwms
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwm
</UL>

<P><STRONG><a name="[1ba]"></a>FTM_DRV_SetDeadtimeCount</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ftm_pwm_driver.o(i.FTM_DRV_SetDeadtimeCount))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwm
</UL>

<P><STRONG><a name="[1bb]"></a>FTM_DRV_SetDeadtimePrescale</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ftm_pwm_driver.o(i.FTM_DRV_SetDeadtimePrescale))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FTM_DRV_SetDeadtimePrescale
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwm
</UL>

<P><STRONG><a name="[1c4]"></a>FTM_DRV_SetDualChnCombineCmd</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, ftm_pwm_driver.o(i.FTM_DRV_SetDualChnCombineCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FTM_DRV_SetDualChnCombineCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwmIndependentChannel
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwmCombinedChannel
</UL>

<P><STRONG><a name="[1c1]"></a>FTM_DRV_SetDualChnCompCmd</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, ftm_pwm_driver.o(i.FTM_DRV_SetDualChnCompCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FTM_DRV_SetDualChnCompCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwmIndependentChannel
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwmCombinedChannel
</UL>

<P><STRONG><a name="[1c6]"></a>FTM_DRV_SetDualChnDeadtimeCmd</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, ftm_pwm_driver.o(i.FTM_DRV_SetDualChnDeadtimeCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FTM_DRV_SetDualChnDeadtimeCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwmIndependentChannel
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwmCombinedChannel
</UL>

<P><STRONG><a name="[1c2]"></a>FTM_DRV_SetDualChnFaultCmd</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, ftm_pwm_driver.o(i.FTM_DRV_SetDualChnFaultCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FTM_DRV_SetDualChnFaultCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwmIndependentChannel
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwmCombinedChannel
</UL>

<P><STRONG><a name="[1c5]"></a>FTM_DRV_SetDualChnMofCombineCmd</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, ftm_pwm_driver.o(i.FTM_DRV_SetDualChnMofCombineCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FTM_DRV_SetDualChnMofCombineCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwmIndependentChannel
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwmCombinedChannel
</UL>

<P><STRONG><a name="[1c3]"></a>FTM_DRV_SetDualChnPwmSyncCmd</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, ftm_pwm_driver.o(i.FTM_DRV_SetDualChnPwmSyncCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FTM_DRV_SetDualChnPwmSyncCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwmIndependentChannel
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwmCombinedChannel
</UL>

<P><STRONG><a name="[1be]"></a>FTM_DRV_SetDualEdgeCaptureCmd</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, ftm_pwm_driver.o(i.FTM_DRV_SetDualEdgeCaptureCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FTM_DRV_SetDualEdgeCaptureCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwmIndependentChannel
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwmCombinedChannel
</UL>

<P><STRONG><a name="[1b6]"></a>FTM_DRV_SetFaultControlMode</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ftm_pwm_driver.o(i.FTM_DRV_SetFaultControlMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FTM_DRV_SetFaultControlMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwm
</UL>

<P><STRONG><a name="[1b5]"></a>FTM_DRV_SetFaultInt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ftm_pwm_driver.o(i.FTM_DRV_SetFaultInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FTM_DRV_SetFaultInt
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwm
</UL>

<P><STRONG><a name="[1b8]"></a>FTM_DRV_SetMod</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ftm_pwm_driver.o(i.FTM_DRV_SetMod))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_InitPwm
</UL>

<P><STRONG><a name="[1ca]"></a>FTM_DRV_SetSoftwareTriggerCmd</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ftm_pwm_driver.o(i.FTM_DRV_SetSoftwareTriggerCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FTM_DRV_SetSoftwareTriggerCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_DRV_UpdatePwmChannel
</UL>

<P><STRONG><a name="[fb]"></a>CanAll_InitBuf</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, canall.o(i.CanAll_InitBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CanAll_InitBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_InitMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_Init
</UL>

<P><STRONG><a name="[fc]"></a>CanAll_InitMsg</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, canall.o(i.CanAll_InitMsg))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAll_InitBuf
</UL>

<P><STRONG><a name="[10c]"></a>CanApp_DealRcvMsgACU35A</STRONG> (Thumb, 412 bytes, Stack size 16 bytes, canapp.o(i.CanApp_DealRcvMsgACU35A))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CanApp_DealRcvMsgACU35A &rArr; CanApp_RxConfirmACU35A &rArr; CanApp_RxTimeOutFlagClr &rArr; CanApp_RxTimeOutReload
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_RxConfirmACU35A
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_DealRcvMsg
</UL>

<P><STRONG><a name="[10b]"></a>CanApp_DealRcvMsgBCM318</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, canapp.o(i.CanApp_DealRcvMsgBCM318))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CanApp_DealRcvMsgBCM318 &rArr; CanApp_RxConfirmBCM318 &rArr; CanApp_RxTimeOutFlagClr &rArr; CanApp_RxTimeOutReload
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_RxConfirmBCM318
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_DealRcvMsg
</UL>

<P><STRONG><a name="[10e]"></a>CanApp_DealRcvMsgCDC093</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, canapp.o(i.CanApp_DealRcvMsgCDC093))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CanApp_DealRcvMsgCDC093
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_RxConfirmCDC093
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_DealRcvMsg
</UL>

<P><STRONG><a name="[10d]"></a>CanApp_DealRcvMsgICM31E</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, canapp.o(i.CanApp_DealRcvMsgICM31E))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CanApp_DealRcvMsgICM31E &rArr; CanApp_RxConfirmICM31E &rArr; CanApp_RxTimeOutFlagClr &rArr; CanApp_RxTimeOutReload
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_RxConfirmICM31E
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_DealRcvMsg
</UL>

<P><STRONG><a name="[10f]"></a>CanApp_DealRcvMsgTEL097</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, canapp.o(i.CanApp_DealRcvMsgTEL097))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CanApp_DealRcvMsgTEL097
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_RxConfirmTEL097
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_DealRcvMsg
</UL>

<P><STRONG><a name="[110]"></a>CanApp_DealRcvMsgVCU3F2</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, canapp.o(i.CanApp_DealRcvMsgVCU3F2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CanApp_DealRcvMsgVCU3F2 &rArr; CanApp_RxConfirmVCU3F2 &rArr; CanApp_RxTimeOutFlagClr &rArr; CanApp_RxTimeOutReload
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_RxConfirmVCU3F2
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_DealRcvMsg
</UL>

<P><STRONG><a name="[10a]"></a>CanApp_MsgCopyToMsg</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, canapp.o(i.CanApp_MsgCopyToMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CanApp_MsgCopyToMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_DealRcvMsg
</UL>

<P><STRONG><a name="[111]"></a>CanApp_RxConfirmACU35A</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, canapp.o(i.CanApp_RxConfirmACU35A))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CanApp_RxConfirmACU35A &rArr; CanApp_RxTimeOutFlagClr &rArr; CanApp_RxTimeOutReload
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_RxTimeOutFlagClr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_RxContinCntInc
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_DealRcvMsgACU35A
</UL>

<P><STRONG><a name="[112]"></a>CanApp_RxConfirmBCM318</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, canapp.o(i.CanApp_RxConfirmBCM318))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CanApp_RxConfirmBCM318 &rArr; CanApp_RxTimeOutFlagClr &rArr; CanApp_RxTimeOutReload
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_RxTimeOutFlagClr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_RxContinCntInc
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_DealRcvMsgBCM318
</UL>

<P><STRONG><a name="[113]"></a>CanApp_RxConfirmCDC093</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, canapp.o(i.CanApp_RxConfirmCDC093))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_DealRcvMsgCDC093
</UL>

<P><STRONG><a name="[114]"></a>CanApp_RxConfirmICM31E</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, canapp.o(i.CanApp_RxConfirmICM31E))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CanApp_RxConfirmICM31E &rArr; CanApp_RxTimeOutFlagClr &rArr; CanApp_RxTimeOutReload
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_RxTimeOutFlagClr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_RxContinCntInc
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_DealRcvMsgICM31E
</UL>

<P><STRONG><a name="[115]"></a>CanApp_RxConfirmTEL097</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, canapp.o(i.CanApp_RxConfirmTEL097))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_DealRcvMsgTEL097
</UL>

<P><STRONG><a name="[116]"></a>CanApp_RxConfirmVCU3F2</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, canapp.o(i.CanApp_RxConfirmVCU3F2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CanApp_RxConfirmVCU3F2 &rArr; CanApp_RxTimeOutFlagClr &rArr; CanApp_RxTimeOutReload
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_RxTimeOutFlagClr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_RxContinCntInc
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanApp_DealRcvMsgVCU3F2
</UL>

<P><STRONG><a name="[7]"></a>CanApp_RxTimeOutACU35A</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, canapp.o(i.CanApp_RxTimeOutACU35A))
<BR>[Address Reference Count : 1]<UL><LI> canapp.o(.constdata)
</UL>
<P><STRONG><a name="[6]"></a>CanApp_RxTimeOutBCM318</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, canapp.o(i.CanApp_RxTimeOutBCM318))
<BR>[Address Reference Count : 1]<UL><LI> canapp.o(.constdata)
</UL>
<P><STRONG><a name="[8]"></a>CanApp_RxTimeOutICM31E</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, canapp.o(i.CanApp_RxTimeOutICM31E))
<BR>[Address Reference Count : 1]<UL><LI> canapp.o(.constdata)
</UL>
<P><STRONG><a name="[9]"></a>CanApp_RxTimeOutVCU3F2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, canapp.o(i.CanApp_RxTimeOutVCU3F2))
<BR>[Address Reference Count : 1]<UL><LI> canapp.o(.constdata)
</UL>
<P><STRONG><a name="[141]"></a>CanTp_DealFunTask</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, cantp.o(i.CanTp_DealFunTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CanTp_DealFunTask &rArr; CanDiag_Dispatcher &rArr; CanDiag_NegResponse &rArr; CAN_SenMsg &rArr; FLEXCAN_TxData &rArr; FLEXCAN_UpdateMbInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_Dispatcher
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_StatTask
</UL>

<P><STRONG><a name="[142]"></a>CanTp_DealPhyTask</STRONG> (Thumb, 388 bytes, Stack size 16 bytes, cantp.o(i.CanTp_DealPhyTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CanTp_DealPhyTask &rArr; CanDiag_Dispatcher &rArr; CanDiag_NegResponse &rArr; CAN_SenMsg &rArr; FLEXCAN_TxData &rArr; FLEXCAN_UpdateMbInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_ReqSenMsg
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_Dispatcher
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_StatTask
</UL>

<P><STRONG><a name="[144]"></a>CanTp_DealSenBufMF</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, cantp.o(i.CanTp_DealSenBufMF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CanTp_DealSenBufMF
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_DealSenBuf
</UL>

<P><STRONG><a name="[143]"></a>CanTp_DealSenBufSF</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, cantp.o(i.CanTp_DealSenBufSF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CanTp_DealSenBufSF
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTp_DealSenBuf
</UL>

<P><STRONG><a name="[18c]"></a>EepAll_InitRadMsg</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, eepall.o(i.EepAll_InitRadMsg))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepAll_Init
</UL>

<P><STRONG><a name="[18a]"></a>EepAll_InitWrtBuf</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, eepall.o(i.EepAll_InitWrtBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EepAll_InitWrtBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepAll_InitWrtMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepAll_Init
</UL>

<P><STRONG><a name="[18b]"></a>EepAll_InitWrtMsg</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, eepall.o(i.EepAll_InitWrtMsg))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepAll_InitWrtBuf
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepAll_Init
</UL>

<P><STRONG><a name="[18e]"></a>EepAll_RadMsg</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, eepall.o(i.EepAll_RadMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EepAll_RadMsg &rArr; EEPROM_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepAll_LoadRadMsg
</UL>

<P><STRONG><a name="[190]"></a>EepAll_WrtMsg</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, eepall.o(i.EepAll_WrtMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EepAll_WrtMsg &rArr; EepAll_WrtMsgCopyToBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepAll_WrtMsgCopyToBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepAll_LoadWrtMsg
</UL>

<P><STRONG><a name="[191]"></a>EepAll_WrtMsgCopyToBuf</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, eepall.o(i.EepAll_WrtMsgCopyToBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EepAll_WrtMsgCopyToBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepAll_WrtMsg
</UL>

<P><STRONG><a name="[31]"></a>DiagDid_IOCtrl_LampCtrl</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, diagdid.o(i.DiagDid_IOCtrl_LampCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DiagDid_IOCtrl_LampCtrl
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSign_ModeTesterStop
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarSign_ModeTesterStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diagdid.o(i.DiagDid_Init)
</UL>
<P><STRONG><a name="[19]"></a>DiagDid_Read_0110</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, diagdid.o(i.DiagDid_Read_0110))
<BR>[Address Reference Count : 1]<UL><LI> diagdid.o(i.DiagDid_Init)
</UL>
<P><STRONG><a name="[1a]"></a>DiagDid_Read_0200</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, diagdid.o(i.DiagDid_Read_0200))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = DiagDid_Read_0200 &rArr; DiagDid_ReadFromEep &rArr; CanDiag_ReadFromEep &rArr; EEPROM_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_ReadFromEep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diagdid.o(i.DiagDid_Init)
</UL>
<P><STRONG><a name="[1b]"></a>DiagDid_Read_0201</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, diagdid.o(i.DiagDid_Read_0201))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = DiagDid_Read_0201 &rArr; DiagDid_ReadFromEep &rArr; CanDiag_ReadFromEep &rArr; EEPROM_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_ReadFromEep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diagdid.o(i.DiagDid_Init)
</UL>
<P><STRONG><a name="[2a]"></a>DiagDid_Read_1000</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, diagdid.o(i.DiagDid_Read_1000))
<BR>[Address Reference Count : 1]<UL><LI> diagdid.o(i.DiagDid_Init)
</UL>
<P><STRONG><a name="[2b]"></a>DiagDid_Read_1002</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, diagdid.o(i.DiagDid_Read_1002))
<BR>[Address Reference Count : 1]<UL><LI> diagdid.o(i.DiagDid_Init)
</UL>
<P><STRONG><a name="[1c]"></a>DiagDid_Read_F102</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, diagdid.o(i.DiagDid_Read_F102))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = DiagDid_Read_F102 &rArr; DiagDid_ReadFromEep &rArr; CanDiag_ReadFromEep &rArr; EEPROM_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataFromRom
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_ReadFromEep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diagdid.o(i.DiagDid_Init)
</UL>
<P><STRONG><a name="[1d]"></a>DiagDid_Read_F103</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, diagdid.o(i.DiagDid_Read_F103))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = DiagDid_Read_F103 &rArr; DiagDid_ReadFromEep &rArr; CanDiag_ReadFromEep &rArr; EEPROM_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataFromRom
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_ReadFromEep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diagdid.o(i.DiagDid_Init)
</UL>
<P><STRONG><a name="[1e]"></a>DiagDid_Read_F17F</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, diagdid.o(i.DiagDid_Read_F17F))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DiagDid_Read_F17F &rArr; GetDataFromRom
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataFromRom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diagdid.o(i.DiagDid_Init)
</UL>
<P><STRONG><a name="[1f]"></a>DiagDid_Read_F180</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, diagdid.o(i.DiagDid_Read_F180))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DiagDid_Read_F180 &rArr; GetDataFromRom
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataFromRom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diagdid.o(i.DiagDid_Init)
</UL>
<P><STRONG><a name="[20]"></a>DiagDid_Read_F184</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, diagdid.o(i.DiagDid_Read_F184))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = DiagDid_Read_F184 &rArr; DiagDid_ReadFromEep &rArr; CanDiag_ReadFromEep &rArr; EEPROM_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataFromRom
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_ReadFromEep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diagdid.o(i.DiagDid_Init)
</UL>
<P><STRONG><a name="[21]"></a>DiagDid_Read_F186</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, diagdid.o(i.DiagDid_Read_F186))
<BR>[Address Reference Count : 1]<UL><LI> diagdid.o(i.DiagDid_Init)
</UL>
<P><STRONG><a name="[22]"></a>DiagDid_Read_F187</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, diagdid.o(i.DiagDid_Read_F187))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DiagDid_Read_F187 &rArr; GetDataFromRom
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataFromRom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diagdid.o(i.DiagDid_Init)
</UL>
<P><STRONG><a name="[23]"></a>DiagDid_Read_F189</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, diagdid.o(i.DiagDid_Read_F189))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DiagDid_Read_F189 &rArr; GetDataFromRom
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataFromRom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diagdid.o(i.DiagDid_Init)
</UL>
<P><STRONG><a name="[24]"></a>DiagDid_Read_F18C</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, diagdid.o(i.DiagDid_Read_F18C))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = DiagDid_Read_F18C &rArr; DiagDid_ReadFromEep &rArr; CanDiag_ReadFromEep &rArr; EEPROM_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataFromRom
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_ReadFromEep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diagdid.o(i.DiagDid_Init)
</UL>
<P><STRONG><a name="[25]"></a>DiagDid_Read_F18E</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, diagdid.o(i.DiagDid_Read_F18E))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DiagDid_Read_F18E &rArr; GetDataFromRom
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataFromRom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diagdid.o(i.DiagDid_Init)
</UL>
<P><STRONG><a name="[26]"></a>DiagDid_Read_F190</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, diagdid.o(i.DiagDid_Read_F190))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = DiagDid_Read_F190 &rArr; DiagDid_ReadFromEep &rArr; CanDiag_ReadFromEep &rArr; EEPROM_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataFromRom
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_ReadFromEep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diagdid.o(i.DiagDid_Init)
</UL>
<P><STRONG><a name="[27]"></a>DiagDid_Read_F193</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, diagdid.o(i.DiagDid_Read_F193))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DiagDid_Read_F193 &rArr; GetDataFromRom
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataFromRom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diagdid.o(i.DiagDid_Init)
</UL>
<P><STRONG><a name="[28]"></a>DiagDid_Read_F195</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, diagdid.o(i.DiagDid_Read_F195))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DiagDid_Read_F195 &rArr; GetDataFromRom
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataFromRom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diagdid.o(i.DiagDid_Init)
</UL>
<P><STRONG><a name="[29]"></a>DiagDid_Read_F199</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, diagdid.o(i.DiagDid_Read_F199))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = DiagDid_Read_F199 &rArr; DiagDid_ReadFromEep &rArr; CanDiag_ReadFromEep &rArr; EEPROM_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataFromRom
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_ReadFromEep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diagdid.o(i.DiagDid_Init)
</UL>
<P><STRONG><a name="[30]"></a>DiagDid_Write_0110</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, diagdid.o(i.DiagDid_Write_0110))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = DiagDid_Write_0110 &rArr; DiagDid_WriteToEep &rArr; CanDiag_WriteToEep &rArr; EEPROM_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_WriteToEep
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_SecurityGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diagdid.o(i.DiagDid_Init)
</UL>
<P><STRONG><a name="[2e]"></a>DiagDid_Write_F102</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, diagdid.o(i.DiagDid_Write_F102))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = DiagDid_Write_F102 &rArr; DiagDid_WriteToEep &rArr; CanDiag_WriteToEep &rArr; EEPROM_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_WriteToEep
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_SecurityGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diagdid.o(i.DiagDid_Init)
</UL>
<P><STRONG><a name="[2f]"></a>DiagDid_Write_F103</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, diagdid.o(i.DiagDid_Write_F103))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = DiagDid_Write_F103 &rArr; DiagDid_WriteToEep &rArr; CanDiag_WriteToEep &rArr; EEPROM_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_WriteToEep
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_SecurityGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diagdid.o(i.DiagDid_Init)
</UL>
<P><STRONG><a name="[2c]"></a>DiagDid_Write_F18C</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, diagdid.o(i.DiagDid_Write_F18C))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = DiagDid_Write_F18C &rArr; DiagDid_ReadFromEep &rArr; CanDiag_ReadFromEep &rArr; EEPROM_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_WriteToEep
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_ReadFromEep
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_SecurityGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diagdid.o(i.DiagDid_Init)
</UL>
<P><STRONG><a name="[2d]"></a>DiagDid_Write_F190</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, diagdid.o(i.DiagDid_Write_F190))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = DiagDid_Write_F190 &rArr; DiagDid_WriteToEep &rArr; CanDiag_WriteToEep &rArr; EEPROM_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagDid_WriteToEep
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanDiag_SecurityGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diagdid.o(i.DiagDid_Init)
</UL>
<P><STRONG><a name="[16f]"></a>CalculateRandom</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, diagsub.o(i.CalculateRandom))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiagSub_Deal2701
</UL>

<P><STRONG><a name="[9a]"></a>AddRoundKey</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, aes.o(i.AddRoundKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_Cipher
</UL>

<P><STRONG><a name="[206]"></a>FFmul</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, aes.o(i.FFmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FFmul
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixColumns
</UL>

<P><STRONG><a name="[9f]"></a>KeyExpansion</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, aes.o(i.KeyExpansion))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = KeyExpansion
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_Init
</UL>

<P><STRONG><a name="[9d]"></a>MixColumns</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, aes.o(i.MixColumns))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MixColumns &rArr; FFmul
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FFmul
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_Cipher
</UL>

<P><STRONG><a name="[9c]"></a>ShiftRows</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, aes.o(i.ShiftRows))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ShiftRows
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_Cipher
</UL>

<P><STRONG><a name="[9b]"></a>SubBytes</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, aes.o(i.SubBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SubBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_Cipher
</UL>

<P><STRONG><a name="[258]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[253]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[76]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
